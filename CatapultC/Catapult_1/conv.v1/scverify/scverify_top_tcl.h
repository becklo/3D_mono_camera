// ----------------------------------------------------------------------------
// SystemC Header for Top
//
//    HLS version: 10.0a/269363 Production Release
//       HLS date: Wed Nov  9 17:38:00 PST 2016
//  Flow Packages: HDL_Tcl 8.0a, SCVerify 8.0a
//
//   Generated by: xph3sle509@ocaepc57
// Generated date: Mon Jan 29 11:55:57 CET 2018
//
// ----------------------------------------------------------------------------
// 
// -------------------------------------
// scverify_top
// top module instantiating reference design,
// DUT and comparator
// -------------------------------------
// 
#ifndef INCLUDED_SCVERIFY_TOP_H
#define INCLUDED_SCVERIFY_TOP_H

#ifndef TO_QUOTED_STRING
#define TO_QUOTED_STRING(x) TO_QUOTED_STRING1(x)
#define TO_QUOTED_STRING1(x) #x
#endif
#ifndef TOP_HDL_ENTITY
#define TOP_HDL_ENTITY conv
#endif

// Hold time for the SCVerify testbench to account for the gate delay after downstream synthesis in pico second(s)
// Hold time value is obtained from 'top_gate_constraints.cpp', which is generated at the end of RTL synthesis
#ifdef CCS_DUT_GATE
extern double __scv_hold_time;
extern double __scv_hold_time_RSCID_1;
extern double __scv_hold_time_RSCID_2;
#else
double __scv_hold_time = 0.0; // default for non-gate simulation is zero
double __scv_hold_time_RSCID_1 = 0.0;
double __scv_hold_time_RSCID_2 = 0.0;
#endif


#include "mc_testbench.h"
#include <mc_reset.h>
#include <mc_transactors.h>
#include <mc_scverify.h>
#include <fstream>
#include <string>
#include "xilinx/BLOCK_1R1W_RBW_trans_rsc.h"
#include <mc_monitor.h>
#include "mc_dut_wrapper.h"
#include "ccs_probes.cpp"


class scverify_top : public sc_module
{
public:
   // Interface Ports
   
   // Data objects
   sc_event deadlock_event;
   sc_signal< sc_logic >                      deadlocked;
   sc_event reset_deactivation_event;
   sc_signal< sc_logic >                      rst;
   sc_signal< sc_logic >                      rst_n;
   bool var_trdone;
   sc_clock clk;
   sc_signal< sc_logic >                      TLS_rst;
   sc_signal< sc_logic >                      in_sync;
   sc_signal< sc_logic >                      out_sync;
   sc_signal< sc_logic >                      inout_sync;
   sc_signal< unsigned >                      wait_for_init;
   sc_signal< sc_logic >                      TLS_design_is_idle;
   sc_signal< bool >                          TLS_design_is_idle_reg;
   sc_signal< sc_logic >                      TLS_enable_stalls;
   sc_signal< unsigned short >                TLS_stall_coverage;
   sc_signal< sc_logic >                      catapult_start;
   sc_signal< sc_logic >                      catapult_done;
   sc_signal< sc_logic >                      catapult_ready;
   ccs_probe_monitor* ccs_probe_monitor_INST;
   sc_signal< sc_logic >                      TLS_image_in_rsc_re;
   sc_signal< sc_lv<32> >                     TLS_image_in_rsc_q;
   sc_signal< sc_lv<17> >                     TLS_image_in_rsc_radr;
   sc_signal< sc_lv<17> >                     TLS_image_in_rsc_wadr;
   sc_signal< sc_lv<32> >                     TLS_image_in_rsc_d;
   sc_signal< sc_logic >                      TLS_image_in_rsc_we;
   sc_signal< sc_logic >                      TLS_image_out_rsc_we;
   sc_signal< sc_lv<32> >                     TLS_image_out_rsc_d;
   sc_signal< sc_lv<17> >                     TLS_image_out_rsc_wadr;
   sc_signal< sc_lv<17> >                     TLS_image_out_rsc_radr;
   sc_signal< sc_logic >                      TLS_image_out_rsc_re;
   sc_signal< sc_lv<32> >                     TLS_image_out_rsc_q;
   tlm::tlm_fifo< mc_wait_ctrl > TLS_in_wait_ctrl_fifo_image_in;
   tlm::tlm_fifo< mgc_sysc_ver_array1D<int,66880> > TLS_fifo_in_image_in;
   sc_signal< sc_logic >                      TLS_image_in_rsc_triosy_lz;
   tlm::tlm_fifo< mc_wait_ctrl > TLS_out_wait_ctrl_fifo_image_out;
   tlm::tlm_fifo< mgc_sysc_ver_array1D<int,66880> > TLS_fifo_out_image_out;
   sc_signal< sc_logic >                      TLS_image_out_rsc_triosy_lz;
   
   // Named Objects
   
   // Module instance pointers
   ccs_DUT_wrapper *conv_INST;
   mc_programmable_reset *rst_driver;
   catapult_monitor *catapult_monitor_INST;
   BLOCK_1R1W_RBW_trans_rsc< 32,17,66880 > *image_in_rsc_INST;
   BLOCK_1R1W_RBW_trans_rsc< 32,17,66880 > *image_out_rsc_INST;
   mc_input_transactor<mgc_sysc_ver_array1D<int,66880>,32,true> *image_in_transactor;
   mc_trios_input_monitor *trios_monitor_image_in_INST;
   mc_output_transactor<mgc_sysc_ver_array1D<int,66880>,32,true> *image_out_transactor;
   mc_trios_output_monitor *trios_monitor_image_out_INST;
   testbench *testbench_INST;
   
   // Declare processes (SC_METHOD and SC_THREAD)
   void deadlock_notify();
   void deadlock_watch();
   void generate_sync();
   void generate_reset();
   
   // Constructor
   SC_HAS_PROCESS(scverify_top);
   scverify_top(
      const sc_module_name& name
   )
      : deadlocked("deadlocked")
      , rst("rst")
      , rst_n("rst_n")
      , var_trdone(false)
      , CCS_CLK_CTOR(clk,"clk",50.000000,SC_NS,0.5,0.000000,SC_NS,false)
      , TLS_rst("TLS_rst")
      , in_sync("in_sync")
      , out_sync("out_sync")
      , inout_sync("inout_sync")
      , wait_for_init("wait_for_init")
      , TLS_design_is_idle("TLS_design_is_idle")
      , TLS_design_is_idle_reg("TLS_design_is_idle_reg")
      , TLS_enable_stalls("TLS_enable_stalls")
      , TLS_stall_coverage("TLS_stall_coverage")
      , catapult_start("catapult_start")
      , catapult_done("catapult_done")
      , catapult_ready("catapult_ready")
      , ccs_probe_monitor_INST(NULL)
      , TLS_image_in_rsc_re("TLS_image_in_rsc_re")
      , TLS_image_in_rsc_q("TLS_image_in_rsc_q")
      , TLS_image_in_rsc_radr("TLS_image_in_rsc_radr")
      , TLS_image_in_rsc_wadr("TLS_image_in_rsc_wadr")
      , TLS_image_in_rsc_d("TLS_image_in_rsc_d")
      , TLS_image_in_rsc_we("TLS_image_in_rsc_we")
      , TLS_image_out_rsc_we("TLS_image_out_rsc_we")
      , TLS_image_out_rsc_d("TLS_image_out_rsc_d")
      , TLS_image_out_rsc_wadr("TLS_image_out_rsc_wadr")
      , TLS_image_out_rsc_radr("TLS_image_out_rsc_radr")
      , TLS_image_out_rsc_re("TLS_image_out_rsc_re")
      , TLS_image_out_rsc_q("TLS_image_out_rsc_q")
      , TLS_in_wait_ctrl_fifo_image_in("TLS_in_wait_ctrl_fifo_image_in",-1)
      , TLS_fifo_in_image_in("TLS_fifo_in_image_in",-1)
      , TLS_image_in_rsc_triosy_lz("TLS_image_in_rsc_triosy_lz")
      , TLS_out_wait_ctrl_fifo_image_out("TLS_out_wait_ctrl_fifo_image_out",-1)
      , TLS_fifo_out_image_out("TLS_fifo_out_image_out",-1)
      , TLS_image_out_rsc_triosy_lz("TLS_image_out_rsc_triosy_lz")
   {
      // Instantiate other modules
      conv_INST = new ccs_DUT_wrapper(
         "rtl",
         TO_QUOTED_STRING(TOP_HDL_ENTITY)
      );
      conv_INST->image_in_rsc_re(TLS_image_in_rsc_re);
      conv_INST->image_in_rsc_q(TLS_image_in_rsc_q);
      conv_INST->image_in_rsc_radr(TLS_image_in_rsc_radr);
      conv_INST->image_out_rsc_we(TLS_image_out_rsc_we);
      conv_INST->image_out_rsc_d(TLS_image_out_rsc_d);
      conv_INST->image_out_rsc_wadr(TLS_image_out_rsc_wadr);
      conv_INST->clk(clk);
      conv_INST->rst(TLS_rst);
      conv_INST->image_in_rsc_triosy_lz(TLS_image_in_rsc_triosy_lz);
      conv_INST->image_out_rsc_triosy_lz(TLS_image_out_rsc_triosy_lz);
      
      rst_driver = new mc_programmable_reset(
         "rst_driver",
         100.0,
         0
      );
      rst_driver->reset_out(TLS_rst);
      
      catapult_monitor_INST = new catapult_monitor(
         "Monitor",
         clk,
         true,
         200851LL,
         200851LL
      );
      catapult_monitor_INST->rst(rst);
      
      image_in_rsc_INST = new BLOCK_1R1W_RBW_trans_rsc< 32,17,66880 > (
         "image_in_rsc",
         true
      );
      image_in_rsc_INST->re(TLS_image_in_rsc_re);
      image_in_rsc_INST->q(TLS_image_in_rsc_q);
      image_in_rsc_INST->radr(TLS_image_in_rsc_radr);
      image_in_rsc_INST->clk(clk);
      image_in_rsc_INST->wadr(TLS_image_in_rsc_wadr);
      image_in_rsc_INST->d(TLS_image_in_rsc_d);
      image_in_rsc_INST->we(TLS_image_in_rsc_we);
      image_in_rsc_INST->add_attribute(*(new sc_attribute<double>("CLK_SKEW_DELAY", __scv_hold_time_RSCID_1 )));
      
      image_out_rsc_INST = new BLOCK_1R1W_RBW_trans_rsc< 32,17,66880 > (
         "image_out_rsc",
         true
      );
      image_out_rsc_INST->we(TLS_image_out_rsc_we);
      image_out_rsc_INST->d(TLS_image_out_rsc_d);
      image_out_rsc_INST->wadr(TLS_image_out_rsc_wadr);
      image_out_rsc_INST->clk(clk);
      image_out_rsc_INST->radr(TLS_image_out_rsc_radr);
      image_out_rsc_INST->re(TLS_image_out_rsc_re);
      image_out_rsc_INST->q(TLS_image_out_rsc_q);
      image_out_rsc_INST->add_attribute(*(new sc_attribute<double>("CLK_SKEW_DELAY", __scv_hold_time_RSCID_2 )));
      
      image_in_transactor = new mc_input_transactor<mgc_sysc_ver_array1D<int,66880>,32,true> (
         "transactor_image_in",
         0,
         32,
         0,
         false
      );
      image_in_transactor->in_wait_ctrl_fifo(TLS_in_wait_ctrl_fifo_image_in);
      image_in_transactor->in_fifo(TLS_fifo_in_image_in);
      image_in_transactor->add_attribute(*(new sc_attribute<int>("MC_TRANSACTOR_EVENT", MC_TRANSACTOR_UNDERFLOW | MC_TRANSACTOR_WAIT )));
      image_in_transactor->bind_clk(clk,true);
      image_in_transactor->register_block(image_in_rsc_INST,image_in_rsc_INST->basename(),TLS_image_in_rsc_triosy_lz,0,66879,1);
      
      trios_monitor_image_in_INST = new mc_trios_input_monitor(
         "image_in_trios_mon"
      );
      trios_monitor_image_in_INST->trios(TLS_image_in_rsc_triosy_lz);
      trios_monitor_image_in_INST->register_mon(catapult_monitor_INST);
      
      image_out_transactor = new mc_output_transactor<mgc_sysc_ver_array1D<int,66880>,32,true> (
         "transactor_image_out",
         0,
         32,
         0
      );
      image_out_transactor->out_wait_ctrl_fifo(TLS_out_wait_ctrl_fifo_image_out);
      image_out_transactor->out_fifo(TLS_fifo_out_image_out);
      image_out_transactor->add_attribute(*(new sc_attribute<int>("MC_TRANSACTOR_EVENT", MC_TRANSACTOR_UNDERFLOW | MC_TRANSACTOR_WAIT )));
      image_out_transactor->bind_clk(clk,true);
      image_out_transactor->register_block(image_out_rsc_INST,image_out_rsc_INST->basename(),TLS_image_out_rsc_triosy_lz,0,66879,1);
      
      trios_monitor_image_out_INST = new mc_trios_output_monitor(
         "image_out_trios_mon"
      );
      trios_monitor_image_out_INST->trios(TLS_image_out_rsc_triosy_lz);
      trios_monitor_image_out_INST->register_mon(catapult_monitor_INST);
      
      testbench_INST = new testbench(
         "user_tb"
      );
      testbench_INST->clk(clk);
      testbench_INST->ccs_image_in(TLS_fifo_in_image_in);
      testbench_INST->ccs_wait_ctrl_image_in(TLS_in_wait_ctrl_fifo_image_in);
      testbench_INST->ccs_image_out(TLS_fifo_out_image_out);
      testbench_INST->ccs_wait_ctrl_image_out(TLS_out_wait_ctrl_fifo_image_out);
      testbench_INST->design_is_idle(TLS_design_is_idle_reg);
      testbench_INST->enable_stalls(TLS_enable_stalls);
      testbench_INST->stall_coverage(TLS_stall_coverage);
      
      
      // Register processes
      SC_METHOD(deadlock_notify);
      sensitive << deadlock_event;
      dont_initialize();
      SC_METHOD(deadlock_watch);
      sensitive  << clk;
      dont_initialize();
      SC_METHOD(generate_sync);
      sensitive << clk << rst;
      dont_initialize();
      SC_METHOD(generate_reset);
      sensitive << reset_deactivation_event;
      // Other constructor statements
      testbench::register_end_of_testbench_obj(catapult_monitor_INST);
      #if defined(CCS_SCVERIFY) && defined(CCS_DUT_RTL) && !defined(CCS_DUT_SYSC) && !defined(CCS_SYSC) && !defined(CCS_DUT_POWER)
      ccs_probe_monitor_INST = new ccs_probe_monitor("ccs_probe_monitor");
      ccs_probe_monitor_INST->clk(clk);
      ccs_probe_monitor_INST->rst(rst);
      #endif
      // set seed for random number generator used by wait_ctrl
      mt19937_init_genrand(19650218UL);
      install_observe_foreign_signals();
   }
   
   ~scverify_top()
   {
      delete conv_INST;
      conv_INST = 0;
      delete rst_driver;
      rst_driver = 0;
      delete catapult_monitor_INST;
      catapult_monitor_INST = 0;
      delete image_in_rsc_INST;
      image_in_rsc_INST = 0;
      delete image_out_rsc_INST;
      image_out_rsc_INST = 0;
      delete image_in_transactor;
      image_in_transactor = 0;
      delete trios_monitor_image_in_INST;
      trios_monitor_image_in_INST = 0;
      delete image_out_transactor;
      image_out_transactor = 0;
      delete trios_monitor_image_out_INST;
      trios_monitor_image_out_INST = 0;
      delete testbench_INST;
      testbench_INST = 0;
   }
   
   // C++ class functions
   public:
      void setup_debug() ;
   public:
      void install_observe_foreign_signals() ;
   public:
      void debug(const char *varname, int flags, int count) ;
};
#endif
