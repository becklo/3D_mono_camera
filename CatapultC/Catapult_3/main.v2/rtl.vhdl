-- ----------------------------------------------------------------------
--  HLS HDL:        VHDL Netlister
--  HLS Version:    10.0a/269363 Production Release
--  HLS Date:       Wed Nov  9 17:38:00 PST 2016
-- 
--  Generated by:   xph3sle509@ocaepc57
--  Generated date: Tue Jan 16 14:33:16 2018
-- ----------------------------------------------------------------------

-- 
-- ------------------------------------------------------------------
--  Design Unit:    ram_Xilinx_KINTEX_7_3_RAMSB_singleport_wport_6_60000_32_16_0_1_0_0_0_1_1_1_0_60000_32_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.funcs.ALL;
USE mgc_hls.mgc_ioport_comps_v11.ALL;


ENTITY ram_Xilinx_KINTEX_7_3_RAMSB_singleport_wport_6_60000_32_16_0_1_0_0_0_1_1_1_0_60000_32_1_gen
    IS
  PORT(
    we : OUT STD_LOGIC;
    addr : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
    data_in : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    data_in_d : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    addr_d : IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    we_d : IN STD_LOGIC
  );
END ram_Xilinx_KINTEX_7_3_RAMSB_singleport_wport_6_60000_32_16_0_1_0_0_0_1_1_1_0_60000_32_1_gen;

ARCHITECTURE v2 OF ram_Xilinx_KINTEX_7_3_RAMSB_singleport_wport_6_60000_32_16_0_1_0_0_0_1_1_1_0_60000_32_1_gen
    IS
  -- Default Constants

BEGIN
  -- Default Constant Signal Assignments

  we <= (we_d);
  addr <= (addr_d);
  data_in <= (data_in_d);
END v2;

-- ------------------------------------------------------------------
--  Design Unit:    ram_Xilinx_KINTEX_7_3_RAMSB_singleport_rwport_5_68256_32_17_0_1_0_0_0_1_1_1_0_68256_32_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.funcs.ALL;
USE mgc_hls.mgc_ioport_comps_v11.ALL;


ENTITY ram_Xilinx_KINTEX_7_3_RAMSB_singleport_rwport_5_68256_32_17_0_1_0_0_0_1_1_1_0_68256_32_1_gen
    IS
  PORT(
    data_out : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    we : OUT STD_LOGIC;
    re : OUT STD_LOGIC;
    addr : OUT STD_LOGIC_VECTOR (16 DOWNTO 0);
    data_in : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    data_in_d : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    addr_d : IN STD_LOGIC_VECTOR (16 DOWNTO 0);
    re_d : IN STD_LOGIC;
    we_d : IN STD_LOGIC;
    data_out_d : OUT STD_LOGIC_VECTOR (31 DOWNTO 0)
  );
END ram_Xilinx_KINTEX_7_3_RAMSB_singleport_rwport_5_68256_32_17_0_1_0_0_0_1_1_1_0_68256_32_1_gen;

ARCHITECTURE v2 OF ram_Xilinx_KINTEX_7_3_RAMSB_singleport_rwport_5_68256_32_17_0_1_0_0_0_1_1_1_0_68256_32_1_gen
    IS
  -- Default Constants

BEGIN
  -- Default Constant Signal Assignments

  data_out_d <= data_out;
  we <= (we_d);
  re <= (re_d);
  addr <= (addr_d);
  data_in <= (data_in_d);
END v2;

-- ------------------------------------------------------------------
--  Design Unit:    ram_Xilinx_KINTEX_7_3_RAMSB_singleport_rport_4_60000_32_16_0_1_0_0_0_1_1_1_0_60000_32_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.funcs.ALL;
USE mgc_hls.mgc_ioport_comps_v11.ALL;


ENTITY ram_Xilinx_KINTEX_7_3_RAMSB_singleport_rport_4_60000_32_16_0_1_0_0_0_1_1_1_0_60000_32_1_gen
    IS
  PORT(
    data_out : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    re : OUT STD_LOGIC;
    addr : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
    addr_d : IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    re_d : IN STD_LOGIC;
    data_out_d : OUT STD_LOGIC_VECTOR (31 DOWNTO 0)
  );
END ram_Xilinx_KINTEX_7_3_RAMSB_singleport_rport_4_60000_32_16_0_1_0_0_0_1_1_1_0_60000_32_1_gen;

ARCHITECTURE v2 OF ram_Xilinx_KINTEX_7_3_RAMSB_singleport_rport_4_60000_32_16_0_1_0_0_0_1_1_1_0_60000_32_1_gen
    IS
  -- Default Constants

BEGIN
  -- Default Constant Signal Assignments

  data_out_d <= data_out;
  re <= (re_d);
  addr <= (addr_d);
END v2;

-- ------------------------------------------------------------------
--  Design Unit:    ram_Xilinx_KINTEX_7_3_RAMSB_singleport_rport_3_60000_32_16_0_1_0_0_0_1_1_1_0_60000_32_1_gen
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.funcs.ALL;
USE mgc_hls.mgc_ioport_comps_v11.ALL;


ENTITY ram_Xilinx_KINTEX_7_3_RAMSB_singleport_rport_3_60000_32_16_0_1_0_0_0_1_1_1_0_60000_32_1_gen
    IS
  PORT(
    data_out : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    re : OUT STD_LOGIC;
    addr : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
    addr_d : IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    re_d : IN STD_LOGIC;
    data_out_d : OUT STD_LOGIC_VECTOR (31 DOWNTO 0)
  );
END ram_Xilinx_KINTEX_7_3_RAMSB_singleport_rport_3_60000_32_16_0_1_0_0_0_1_1_1_0_60000_32_1_gen;

ARCHITECTURE v2 OF ram_Xilinx_KINTEX_7_3_RAMSB_singleport_rport_3_60000_32_16_0_1_0_0_0_1_1_1_0_60000_32_1_gen
    IS
  -- Default Constants

BEGIN
  -- Default Constant Signal Assignments

  data_out_d <= data_out;
  re <= (re_d);
  addr <= (addr_d);
END v2;

-- ------------------------------------------------------------------
--  Design Unit:    main_core_core_fsm
--  FSM Module
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.funcs.ALL;
USE mgc_hls.mgc_ioport_comps_v11.ALL;


ENTITY main_core_core_fsm IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    fsm_output : OUT STD_LOGIC_VECTOR (13 DOWNTO 0);
    for_for_C_2_tr0 : IN STD_LOGIC;
    for_C_0_tr0 : IN STD_LOGIC;
    for_1_for_C_0_tr0 : IN STD_LOGIC;
    reconstruction_error_for_C_0_tr0 : IN STD_LOGIC;
    reconstruction_error_for_for_C_1_tr0 : IN STD_LOGIC;
    reconstruction_error_for_C_1_tr0 : IN STD_LOGIC;
    for_1_for_C_2_tr0 : IN STD_LOGIC;
    for_1_C_0_tr0 : IN STD_LOGIC
  );
END main_core_core_fsm;

ARCHITECTURE v2 OF main_core_core_fsm IS
  -- Default Constants

  -- FSM State Type Declaration for main_core_core_fsm_1
  TYPE main_core_core_fsm_1_ST IS (main_C_0, for_for_C_0, for_for_C_1, for_for_C_2,
      for_C_0, for_1_for_C_0, reconstruction_error_for_C_0, reconstruction_error_for_for_C_0,
      reconstruction_error_for_for_C_1, reconstruction_error_for_C_1, for_1_for_C_1,
      for_1_for_C_2, for_1_C_0, main_C_1);

  SIGNAL state_var : main_core_core_fsm_1_ST;
  SIGNAL state_var_NS : main_core_core_fsm_1_ST;

BEGIN
  -- Default Constant Signal Assignments

  main_core_core_fsm_1 : PROCESS (for_for_C_2_tr0, for_C_0_tr0, for_1_for_C_0_tr0,
      reconstruction_error_for_C_0_tr0, reconstruction_error_for_for_C_1_tr0, reconstruction_error_for_C_1_tr0,
      for_1_for_C_2_tr0, for_1_C_0_tr0, state_var)
  BEGIN
    CASE state_var IS
      WHEN for_for_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000000010");
        state_var_NS <= for_for_C_1;
      WHEN for_for_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000000100");
        state_var_NS <= for_for_C_2;
      WHEN for_for_C_2 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000001000");
        IF ( for_for_C_2_tr0 = '1' ) THEN
          state_var_NS <= for_C_0;
        ELSE
          state_var_NS <= for_for_C_0;
        END IF;
      WHEN for_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000010000");
        IF ( for_C_0_tr0 = '1' ) THEN
          state_var_NS <= for_1_for_C_0;
        ELSE
          state_var_NS <= for_for_C_0;
        END IF;
      WHEN for_1_for_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000100000");
        IF ( for_1_for_C_0_tr0 = '1' ) THEN
          state_var_NS <= for_1_for_C_1;
        ELSE
          state_var_NS <= reconstruction_error_for_C_0;
        END IF;
      WHEN reconstruction_error_for_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000001000000");
        IF ( reconstruction_error_for_C_0_tr0 = '1' ) THEN
          state_var_NS <= reconstruction_error_for_C_1;
        ELSE
          state_var_NS <= reconstruction_error_for_for_C_0;
        END IF;
      WHEN reconstruction_error_for_for_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000010000000");
        state_var_NS <= reconstruction_error_for_for_C_1;
      WHEN reconstruction_error_for_for_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000100000000");
        IF ( reconstruction_error_for_for_C_1_tr0 = '1' ) THEN
          state_var_NS <= reconstruction_error_for_C_1;
        ELSE
          state_var_NS <= reconstruction_error_for_for_C_0;
        END IF;
      WHEN reconstruction_error_for_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00001000000000");
        IF ( reconstruction_error_for_C_1_tr0 = '1' ) THEN
          state_var_NS <= for_1_for_C_1;
        ELSE
          state_var_NS <= reconstruction_error_for_C_0;
        END IF;
      WHEN for_1_for_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00010000000000");
        state_var_NS <= for_1_for_C_2;
      WHEN for_1_for_C_2 =>
        fsm_output <= STD_LOGIC_VECTOR'( "00100000000000");
        IF ( for_1_for_C_2_tr0 = '1' ) THEN
          state_var_NS <= for_1_C_0;
        ELSE
          state_var_NS <= for_1_for_C_0;
        END IF;
      WHEN for_1_C_0 =>
        fsm_output <= STD_LOGIC_VECTOR'( "01000000000000");
        IF ( for_1_C_0_tr0 = '1' ) THEN
          state_var_NS <= main_C_1;
        ELSE
          state_var_NS <= for_1_for_C_0;
        END IF;
      WHEN main_C_1 =>
        fsm_output <= STD_LOGIC_VECTOR'( "10000000000000");
        state_var_NS <= main_C_0;
      -- main_C_0
      WHEN OTHERS =>
        fsm_output <= STD_LOGIC_VECTOR'( "00000000000001");
        state_var_NS <= for_for_C_0;
    END CASE;
  END PROCESS main_core_core_fsm_1;

  main_core_core_fsm_1_REG : PROCESS (clk)
  BEGIN
    IF clk'event AND ( clk = '1' ) THEN
      IF ( rst = '1' ) THEN
        state_var <= main_C_0;
      ELSE
        state_var <= state_var_NS;
      END IF;
    END IF;
  END PROCESS main_core_core_fsm_1_REG;

END v2;

-- ------------------------------------------------------------------
--  Design Unit:    main_core
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.funcs.ALL;
USE mgc_hls.mgc_ioport_comps_v11.ALL;


ENTITY main_core IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    image_net_rsc_triosy_lz : OUT STD_LOGIC;
    image_floue_rsc_triosy_lz : OUT STD_LOGIC;
    image_error_rsc_triosy_lz : OUT STD_LOGIC;
    depth_rsc_triosy_lz : OUT STD_LOGIC;
    return_rsc_z : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    return_rsc_triosy_lz : OUT STD_LOGIC;
    image_net_rsci_addr_d : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
    image_net_rsci_data_out_d : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    image_floue_rsci_addr_d : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
    image_floue_rsci_data_out_d : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    image_error_rsci_data_in_d : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    image_error_rsci_addr_d : OUT STD_LOGIC_VECTOR (16 DOWNTO 0);
    image_error_rsci_re_d : OUT STD_LOGIC;
    image_error_rsci_we_d : OUT STD_LOGIC;
    image_error_rsci_data_out_d : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    depth_rsci_data_in_d : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    depth_rsci_addr_d : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
    depth_rsci_we_d : OUT STD_LOGIC;
    image_net_rsci_re_d_pff : OUT STD_LOGIC
  );
END main_core;

ARCHITECTURE v2 OF main_core IS
  -- Default Constants

  -- Interconnect Declarations
  SIGNAL fsm_output : STD_LOGIC_VECTOR (13 DOWNTO 0);
  SIGNAL or_tmp_30 : STD_LOGIC;
  SIGNAL for_i_7_0_sva_3 : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL for_for_j_8_0_sva_3 : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL for_for_j_8_0_sva_4 : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL for_1_i_7_0_sva_4 : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL for_1_for_j_8_0_sva : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL for_1_for_acc_6_psp_1_sva_1 : STD_LOGIC_VECTOR (4 DOWNTO 0);
  SIGNAL for_1_for_acc_7_psp_1_sva_1 : STD_LOGIC_VECTOR (5 DOWNTO 0);
  SIGNAL reconstruction_error_rec_error_sva : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL reconstruction_error_for_l_sva_3 : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL reconstruction_error_rec_error_lpi_6 : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL exit_reconstruction_error_for_for_sva_1 : STD_LOGIC;
  SIGNAL for_1_for_j_8_0_sva_4 : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL for_for_if_for_for_if_and_itm_1 : STD_LOGIC;
  SIGNAL for_for_else_acc_itm_2 : STD_LOGIC_VECTOR (13 DOWNTO 0);
  SIGNAL for_for_slc_for_for_acc_7_itm : STD_LOGIC;
  SIGNAL for_1_for_slc_for_1_for_acc_7_itm_1 : STD_LOGIC;
  SIGNAL reconstruction_error_for_for_c_sva_31_9_2 : STD_LOGIC_VECTOR (22 DOWNTO
      0);
  SIGNAL reconstruction_error_for_for_c_sva_8_0_2 : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL for_for_if_acc_1_tmp_5 : STD_LOGIC;
  SIGNAL exit_reconstruction_error_for_sva_mx0 : STD_LOGIC;
  SIGNAL reconstruction_error_for_for_acc_6_sdt : STD_LOGIC_VECTOR (13 DOWNTO 0);
  SIGNAL reg_return_rsc_triosy_obj_ld_cse : STD_LOGIC;
  SIGNAL or_11_cse : STD_LOGIC;
  SIGNAL or_10_cse : STD_LOGIC;
  SIGNAL or_18_cse : STD_LOGIC;
  SIGNAL z_out : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL z_out_1 : STD_LOGIC_VECTOR (12 DOWNTO 0);
  SIGNAL z_out_2 : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL z_out_3 : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL z_out_4 : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL z_out_5 : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL z_out_6 : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL z_out_8 : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL for_1_for_acc_6_psp_1_sva : STD_LOGIC_VECTOR (4 DOWNTO 0);
  SIGNAL reconstruction_error_for_l_acc_psp : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL reconstruction_error_for_for_c_acc_psp : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL for_for_aif_oif_acc_itm_9 : STD_LOGIC;
  SIGNAL for_for_oif_acc_itm_8 : STD_LOGIC;
  SIGNAL z_out_7_32 : STD_LOGIC;
  SIGNAL z_out_9_5 : STD_LOGIC;

  SIGNAL not_39_nl : STD_LOGIC;
  SIGNAL reconstruction_error_rec_error_mux1h_4_nl : STD_LOGIC_VECTOR (31 DOWNTO
      0);
  SIGNAL not_34_nl : STD_LOGIC;
  SIGNAL reconstruction_error_rec_error_mux1h_5_nl : STD_LOGIC_VECTOR (31 DOWNTO
      0);
  SIGNAL or_49_nl : STD_LOGIC;
  SIGNAL not_nl : STD_LOGIC;
  SIGNAL reconstruction_error_for_for_c_mux_nl : STD_LOGIC_VECTOR (22 DOWNTO 0);
  SIGNAL not_38_nl : STD_LOGIC;
  SIGNAL for_for_aif_oif_acc_nl : STD_LOGIC_VECTOR (9 DOWNTO 0);
  SIGNAL for_for_oif_acc_nl : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL for_for_if_acc_1_nl : STD_LOGIC_VECTOR (5 DOWNTO 0);
  SIGNAL reconstruction_error_for_acc_3_nl : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL image_error_mux1h_nl : STD_LOGIC;
  SIGNAL image_error_image_error_and_nl : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL image_error_mux_nl : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL image_error_not_2_nl : STD_LOGIC;
  SIGNAL image_error_mux1h_2_nl : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL for_for_if_acc_nl : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL image_error_image_error_mux_nl : STD_LOGIC_VECTOR (2 DOWNTO 0);
  SIGNAL reconstruction_error_for_for_reconstruction_error_for_for_and_2_nl : STD_LOGIC_VECTOR
      (17 DOWNTO 0);
  SIGNAL reconstruction_error_for_for_nor_2_nl : STD_LOGIC;
  SIGNAL reconstruction_error_for_for_reconstruction_error_for_for_and_3_nl : STD_LOGIC_VECTOR
      (4 DOWNTO 0);
  SIGNAL reconstruction_error_for_for_mux_3_nl : STD_LOGIC_VECTOR (4 DOWNTO 0);
  SIGNAL reconstruction_error_for_for_nor_3_nl : STD_LOGIC;
  SIGNAL reconstruction_error_for_for_mux1h_2_nl : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL reconstruction_error_for_for_mux1h_3_nl : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL reconstruction_error_for_for_or_2_nl : STD_LOGIC;
  SIGNAL for_for_else_mux_2_nl : STD_LOGIC_VECTOR (12 DOWNTO 0);
  SIGNAL for_for_else_mul_2_nl : STD_LOGIC_VECTOR (12 DOWNTO 0);
  SIGNAL for_for_else_mux_3_nl : STD_LOGIC_VECTOR (4 DOWNTO 0);
  SIGNAL for_for_mux1h_2_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL mux_2_nl : STD_LOGIC_VECTOR (6 DOWNTO 0);
  SIGNAL or_60_nl : STD_LOGIC;
  SIGNAL for_mux_3_nl : STD_LOGIC_VECTOR (7 DOWNTO 0);
  SIGNAL for_for_aelse_mux_4_nl : STD_LOGIC_VECTOR (5 DOWNTO 0);
  SIGNAL for_for_mux_2_nl : STD_LOGIC_VECTOR (8 DOWNTO 0);
  SIGNAL acc_5_nl : STD_LOGIC_VECTOR (32 DOWNTO 0);
  SIGNAL reconstruction_error_for_for_mux_4_nl : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL reconstruction_error_for_for_mux_5_nl : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL reconstruction_error_for_acc_nl : STD_LOGIC_VECTOR (32 DOWNTO 0);
  SIGNAL reconstruction_error_for_reconstruction_error_for_mux_1_nl : STD_LOGIC_VECTOR
      (31 DOWNTO 0);
  SIGNAL reconstruction_error_for_reconstruction_error_for_or_1_nl : STD_LOGIC;
  SIGNAL reconstruction_error_for_reconstruction_error_for_and_1_nl : STD_LOGIC_VECTOR
      (5 DOWNTO 0);
  SIGNAL reconstruction_error_for_mux_4_nl : STD_LOGIC_VECTOR (5 DOWNTO 0);
  SIGNAL reconstruction_error_for_acc_8_nl : STD_LOGIC_VECTOR (5 DOWNTO 0);
  SIGNAL reconstruction_error_for_not_13_nl : STD_LOGIC;
  SIGNAL reconstruction_error_for_mux1h_2_nl : STD_LOGIC_VECTOR (1 DOWNTO 0);
  SIGNAL reconstruction_error_for_mux_5_nl : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL for_acc_nl : STD_LOGIC_VECTOR (5 DOWNTO 0);
  SIGNAL return_rsci_d : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL return_rsci_z : STD_LOGIC_VECTOR (31 DOWNTO 0);

  COMPONENT main_core_core_fsm
    PORT(
      clk : IN STD_LOGIC;
      rst : IN STD_LOGIC;
      fsm_output : OUT STD_LOGIC_VECTOR (13 DOWNTO 0);
      for_for_C_2_tr0 : IN STD_LOGIC;
      for_C_0_tr0 : IN STD_LOGIC;
      for_1_for_C_0_tr0 : IN STD_LOGIC;
      reconstruction_error_for_C_0_tr0 : IN STD_LOGIC;
      reconstruction_error_for_for_C_1_tr0 : IN STD_LOGIC;
      reconstruction_error_for_C_1_tr0 : IN STD_LOGIC;
      for_1_for_C_2_tr0 : IN STD_LOGIC;
      for_1_C_0_tr0 : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL main_core_core_fsm_inst_fsm_output : STD_LOGIC_VECTOR (13 DOWNTO 0);
  SIGNAL main_core_core_fsm_inst_for_for_C_2_tr0 : STD_LOGIC;
  SIGNAL main_core_core_fsm_inst_for_C_0_tr0 : STD_LOGIC;
  SIGNAL main_core_core_fsm_inst_reconstruction_error_for_C_0_tr0 : STD_LOGIC;
  SIGNAL main_core_core_fsm_inst_for_1_for_C_2_tr0 : STD_LOGIC;
  SIGNAL main_core_core_fsm_inst_for_1_C_0_tr0 : STD_LOGIC;

  FUNCTION MUX1HOT_s_1_3_2(input_2 : STD_LOGIC;
  input_1 : STD_LOGIC;
  input_0 : STD_LOGIC;
  sel : STD_LOGIC_VECTOR(2 DOWNTO 0))
  RETURN STD_LOGIC IS
    VARIABLE result : STD_LOGIC;
    VARIABLE tmp : STD_LOGIC;

    BEGIN
      tmp := sel(0);
      result := input_0 and tmp;
      tmp := sel(1);
      result := result or ( input_1 and tmp);
      tmp := sel(2);
      result := result or ( input_2 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_2_3_2(input_2 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(1 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(2 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(1 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(1 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_32_3_2(input_2 : STD_LOGIC_VECTOR(31 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(31 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(31 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(2 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(31 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(31 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_8_3_2(input_2 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(2 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(7 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(7 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_9_3_2(input_2 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(2 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(8 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(8 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
    RETURN result;
  END;

  FUNCTION MUX1HOT_v_9_4_2(input_3 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  input_2 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  input_0 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  sel : STD_LOGIC_VECTOR(3 DOWNTO 0))
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(8 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(8 DOWNTO 0);

    BEGIN
      tmp := (OTHERS=>sel(0));
      result := input_0 and tmp;
      tmp := (OTHERS=>sel( 1));
      result := result or ( input_1 and tmp);
      tmp := (OTHERS=>sel( 2));
      result := result or ( input_2 and tmp);
      tmp := (OTHERS=>sel( 3));
      result := result or ( input_3 and tmp);
    RETURN result;
  END;

  FUNCTION MUX_s_1_2_2(input_0 : STD_LOGIC;
  input_1 : STD_LOGIC;
  sel : STD_LOGIC)
  RETURN STD_LOGIC IS
    VARIABLE result : STD_LOGIC;
    VARIABLE tmp : STD_LOGIC;

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_13_2_2(input_0 : STD_LOGIC_VECTOR(12 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(12 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(12 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(12 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_18_2_2(input_0 : STD_LOGIC_VECTOR(17 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(17 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(17 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(17 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_23_2_2(input_0 : STD_LOGIC_VECTOR(22 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(22 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(22 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(22 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_32_2_2(input_0 : STD_LOGIC_VECTOR(31 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(31 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(31 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(31 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_3_2_2(input_0 : STD_LOGIC_VECTOR(2 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(2 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(2 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(2 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_4_2_2(input_0 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(3 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(3 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(3 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_5_2_2(input_0 : STD_LOGIC_VECTOR(4 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(4 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(4 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(4 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_6_2_2(input_0 : STD_LOGIC_VECTOR(5 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(5 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(5 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(5 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_7_2_2(input_0 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(6 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(6 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(6 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_8_2_2(input_0 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(7 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(7 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(7 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

  FUNCTION MUX_v_9_2_2(input_0 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  input_1 : STD_LOGIC_VECTOR(8 DOWNTO 0);
  sel : STD_LOGIC)
  RETURN STD_LOGIC_VECTOR IS
    VARIABLE result : STD_LOGIC_VECTOR(8 DOWNTO 0);
    VARIABLE tmp : STD_LOGIC_VECTOR(8 DOWNTO 0);

    BEGIN
      CASE sel IS
        WHEN '0' =>
          result := input_0;
        WHEN others =>
          result := input_1;
      END CASE;
    RETURN result;
  END;

BEGIN
  -- Default Constant Signal Assignments

  return_rsci : mgc_hls.mgc_ioport_comps_v11.mgc_out_stdreg_v1
    GENERIC MAP(
      rscid => 7,
      width => 32
      )
    PORT MAP(
      d => return_rsci_d,
      z => return_rsci_z
    );
  return_rsci_d <= STD_LOGIC_VECTOR'( "00000000000000000000000000000000");
  return_rsc_z <= return_rsci_z;

  image_net_rsc_triosy_obj : mgc_hls.mgc_ioport_comps_v11.mgc_io_sync_v1
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_return_rsc_triosy_obj_ld_cse,
      lz => image_net_rsc_triosy_lz
    );
  image_floue_rsc_triosy_obj : mgc_hls.mgc_ioport_comps_v11.mgc_io_sync_v1
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_return_rsc_triosy_obj_ld_cse,
      lz => image_floue_rsc_triosy_lz
    );
  image_error_rsc_triosy_obj : mgc_hls.mgc_ioport_comps_v11.mgc_io_sync_v1
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_return_rsc_triosy_obj_ld_cse,
      lz => image_error_rsc_triosy_lz
    );
  depth_rsc_triosy_obj : mgc_hls.mgc_ioport_comps_v11.mgc_io_sync_v1
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_return_rsc_triosy_obj_ld_cse,
      lz => depth_rsc_triosy_lz
    );
  return_rsc_triosy_obj : mgc_hls.mgc_ioport_comps_v11.mgc_io_sync_v1
    GENERIC MAP(
      valid => 0
      )
    PORT MAP(
      ld => reg_return_rsc_triosy_obj_ld_cse,
      lz => return_rsc_triosy_lz
    );
  main_core_core_fsm_inst : main_core_core_fsm
    PORT MAP(
      clk => clk,
      rst => rst,
      fsm_output => main_core_core_fsm_inst_fsm_output,
      for_for_C_2_tr0 => main_core_core_fsm_inst_for_for_C_2_tr0,
      for_C_0_tr0 => main_core_core_fsm_inst_for_C_0_tr0,
      for_1_for_C_0_tr0 => exit_reconstruction_error_for_sva_mx0,
      reconstruction_error_for_C_0_tr0 => main_core_core_fsm_inst_reconstruction_error_for_C_0_tr0,
      reconstruction_error_for_for_C_1_tr0 => exit_reconstruction_error_for_for_sva_1,
      reconstruction_error_for_C_1_tr0 => exit_reconstruction_error_for_sva_mx0,
      for_1_for_C_2_tr0 => main_core_core_fsm_inst_for_1_for_C_2_tr0,
      for_1_C_0_tr0 => main_core_core_fsm_inst_for_1_C_0_tr0
    );
  fsm_output <= main_core_core_fsm_inst_fsm_output;
  main_core_core_fsm_inst_for_for_C_2_tr0 <= NOT for_for_slc_for_for_acc_7_itm;
  main_core_core_fsm_inst_for_C_0_tr0 <= NOT z_out_9_5;
  main_core_core_fsm_inst_reconstruction_error_for_C_0_tr0 <= NOT (readindex(STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(readslice(STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED((NOT
      for_1_for_acc_7_psp_1_sva_1) & (NOT (for_1_for_j_8_0_sva(2 DOWNTO 0)))), 9),
      10) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(reconstruction_error_for_for_c_acc_psp),
      9), 10), 10)), 2, 8)) + UNSIGNED'( "01111111"), 8)), 7));
  main_core_core_fsm_inst_for_1_for_C_2_tr0 <= NOT for_1_for_slc_for_1_for_acc_7_itm_1;
  main_core_core_fsm_inst_for_1_C_0_tr0 <= NOT z_out_9_5;

  or_18_cse <= (fsm_output(0)) OR (fsm_output(4));
  or_11_cse <= (z_out_4(6)) OR for_for_aif_oif_acc_itm_9;
  or_10_cse <= for_for_if_acc_1_tmp_5 OR for_for_oif_acc_itm_8;
  reconstruction_error_for_for_acc_6_sdt <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(z_out(13
      DOWNTO 0)) + UNSIGNED(reconstruction_error_for_l_sva_3(16 DOWNTO 3)), 14));
  for_for_aif_oif_acc_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED('1' & (NOT for_for_j_8_0_sva_3))
      + SIGNED'( "0100110101"), 10));
  for_for_aif_oif_acc_itm_9 <= readindex(STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(for_for_aif_oif_acc_nl),
      10)), 9);
  for_for_oif_acc_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED('1' & (NOT for_i_7_0_sva_3))
      + SIGNED'( "011010001"), 9));
  for_for_oif_acc_itm_8 <= readindex(STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(for_for_oif_acc_nl),
      9)), 8);
  for_for_if_acc_1_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(CONV_SIGNED(CONV_UNSIGNED(UNSIGNED(for_i_7_0_sva_3(7
      DOWNTO 3)), 5), 6) + SIGNED'( "111111"), 6));
  for_for_if_acc_1_tmp_5 <= readindex(STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(for_for_if_acc_1_nl),
      6)), 5);
  reconstruction_error_for_acc_3_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(z_out_4
      & (reconstruction_error_for_l_acc_psp(1 DOWNTO 0))) + SIGNED('1' & (NOT for_1_for_acc_6_psp_1_sva)
      & (NOT (for_1_i_7_0_sva_4(2 DOWNTO 0)))), 9));
  exit_reconstruction_error_for_sva_mx0 <= MUX_s_1_2_2((NOT (readindex(STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(reconstruction_error_for_acc_3_nl),
      9)), 8))), (NOT z_out_7_32), fsm_output(9));
  for_1_for_acc_6_psp_1_sva <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(for_1_i_7_0_sva_4(7
      DOWNTO 3)) + UNSIGNED'( "00001"), 5));
  reconstruction_error_for_l_acc_psp <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(for_1_for_acc_6_psp_1_sva
      & (for_1_i_7_0_sva_4(2 DOWNTO 0))) + UNSIGNED'( "11111011"), 8));
  reconstruction_error_for_for_c_acc_psp <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(for_1_for_acc_7_psp_1_sva_1
      & (for_1_for_j_8_0_sva(2 DOWNTO 0))) + UNSIGNED'( "111111011"), 9));
  or_tmp_30 <= TO_STDLOGIC(fsm_output(9 DOWNTO 6)/=STD_LOGIC_VECTOR'("0000"));
  image_net_rsci_addr_d <= z_out_1 & (for_i_7_0_sva_3(2 DOWNTO 0));
  image_net_rsci_re_d_pff <= NOT(((NOT((z_out_4(6)) OR for_for_aif_oif_acc_itm_9))
      OR (NOT(for_for_if_acc_1_tmp_5 OR for_for_oif_acc_itm_8))) AND (fsm_output(1)));
  image_floue_rsci_addr_d <= z_out_1 & (for_i_7_0_sva_3(2 DOWNTO 0));
  image_error_rsci_data_in_d <= MUX_v_32_2_2(STD_LOGIC_VECTOR'("00000000000000000000000000000000"),
      z_out_6, (fsm_output(2)));
  image_error_mux1h_nl <= MUX1HOT_s_1_3_2((z_out(13)), (for_for_else_acc_itm_2(13)),
      (reconstruction_error_for_for_acc_6_sdt(13)), STD_LOGIC_VECTOR'( (fsm_output(1))
      & (fsm_output(2)) & (fsm_output(7))));
  image_error_mux_nl <= MUX_v_4_2_2((for_for_else_acc_itm_2(12 DOWNTO 9)), (reconstruction_error_for_for_acc_6_sdt(12
      DOWNTO 9)), fsm_output(7));
  image_error_not_2_nl <= NOT (fsm_output(1));
  image_error_image_error_and_nl <= MUX_v_4_2_2(STD_LOGIC_VECTOR'("0000"), image_error_mux_nl,
      image_error_not_2_nl);
  for_for_if_acc_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(z_out(8 DOWNTO 0))
      + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(for_i_7_0_sva_3(7 DOWNTO 3)), 5), 9),
      9));
  image_error_mux1h_2_nl <= MUX1HOT_v_9_3_2(STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(for_for_if_acc_nl),
      9)), (for_for_else_acc_itm_2(8 DOWNTO 0)), (reconstruction_error_for_for_acc_6_sdt(8
      DOWNTO 0)), STD_LOGIC_VECTOR'( (fsm_output(1)) & (fsm_output(2)) & (fsm_output(7))));
  image_error_image_error_mux_nl <= MUX_v_3_2_2((for_i_7_0_sva_3(2 DOWNTO 0)), (reconstruction_error_for_l_sva_3(2
      DOWNTO 0)), fsm_output(7));
  image_error_rsci_addr_d <= image_error_mux1h_nl & image_error_image_error_and_nl
      & image_error_mux1h_2_nl & image_error_image_error_mux_nl;
  image_error_rsci_re_d <= NOT (fsm_output(7));
  image_error_rsci_we_d <= NOT((or_11_cse AND or_10_cse AND (fsm_output(1))) OR ((NOT
      for_for_if_for_for_if_and_itm_1) AND (fsm_output(2))));
  depth_rsci_data_in_d <= MUX_v_32_2_2(STD_LOGIC_VECTOR'( "00000000000000000000000011111111"),
      reconstruction_error_rec_error_sva, z_out_7_32);
  depth_rsci_addr_d <= z_out_1 & (for_1_i_7_0_sva_4(2 DOWNTO 0));
  depth_rsci_we_d <= NOT (fsm_output(10));
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        for_i_7_0_sva_3 <= STD_LOGIC_VECTOR'( "00000000");
      ELSIF ( or_18_cse = '1' ) THEN
        for_i_7_0_sva_3 <= MUX_v_8_2_2(STD_LOGIC_VECTOR'("00000000"), z_out_3, (fsm_output(4)));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        for_for_j_8_0_sva_3 <= STD_LOGIC_VECTOR'( "000000000");
        reg_return_rsc_triosy_obj_ld_cse <= '0';
        for_for_else_acc_itm_2 <= STD_LOGIC_VECTOR'( "00000000000000");
        for_for_if_for_for_if_and_itm_1 <= '0';
        reconstruction_error_rec_error_sva <= STD_LOGIC_VECTOR'( "00000000000000000000000000000000");
        reconstruction_error_rec_error_lpi_6 <= STD_LOGIC_VECTOR'( "00000000000000000000000000000000");
        exit_reconstruction_error_for_for_sva_1 <= '0';
        reconstruction_error_for_for_c_sva_31_9_2 <= STD_LOGIC_VECTOR'( "00000000000000000000000");
        for_1_for_slc_for_1_for_acc_7_itm_1 <= '0';
        for_1_for_j_8_0_sva_4 <= STD_LOGIC_VECTOR'( "000000000");
      ELSE
        for_for_j_8_0_sva_3 <= MUX_v_9_2_2(STD_LOGIC_VECTOR'("000000000"), for_for_j_8_0_sva_4,
            not_39_nl);
        reg_return_rsc_triosy_obj_ld_cse <= (NOT z_out_9_5) AND (fsm_output(12));
        for_for_else_acc_itm_2 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(z_out(13
            DOWNTO 0)) + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(for_i_7_0_sva_3(7 DOWNTO
            3)), 5), 14), 14));
        for_for_if_for_for_if_and_itm_1 <= or_11_cse AND or_10_cse;
        reconstruction_error_rec_error_sva <= MUX_v_32_2_2(STD_LOGIC_VECTOR'("00000000000000000000000000000000"),
            reconstruction_error_rec_error_mux1h_4_nl, not_34_nl);
        reconstruction_error_rec_error_lpi_6 <= MUX_v_32_2_2(STD_LOGIC_VECTOR'("00000000000000000000000000000000"),
            reconstruction_error_rec_error_mux1h_5_nl, not_nl);
        exit_reconstruction_error_for_for_sva_1 <= NOT z_out_7_32;
        reconstruction_error_for_for_c_sva_31_9_2 <= MUX_v_23_2_2(STD_LOGIC_VECTOR'("00000000000000000000000"),
            reconstruction_error_for_for_c_mux_nl, not_38_nl);
        for_1_for_slc_for_1_for_acc_7_itm_1 <= z_out_2(7);
        for_1_for_j_8_0_sva_4 <= z_out_5;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        for_for_slc_for_for_acc_7_itm <= '0';
      ELSIF ( (fsm_output(1)) = '1' ) THEN
        for_for_slc_for_for_acc_7_itm <= z_out_2(7);
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        for_for_j_8_0_sva_4 <= STD_LOGIC_VECTOR'( "000000000");
      ELSIF ( (fsm_output(1)) = '1' ) THEN
        for_for_j_8_0_sva_4 <= z_out_5;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        for_1_i_7_0_sva_4 <= STD_LOGIC_VECTOR'( "00000000");
      ELSIF ( ((fsm_output(4)) OR (fsm_output(12))) = '1' ) THEN
        for_1_i_7_0_sva_4 <= MUX_v_8_2_2(STD_LOGIC_VECTOR'("00000000"), z_out_3,
            (fsm_output(12)));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        for_1_for_j_8_0_sva <= STD_LOGIC_VECTOR'( "000000000");
      ELSIF ( ((fsm_output(12)) OR (fsm_output(4)) OR (fsm_output(11))) = '1' ) THEN
        for_1_for_j_8_0_sva <= MUX_v_9_2_2(STD_LOGIC_VECTOR'("000000000"), for_1_for_j_8_0_sva_4,
            (fsm_output(11)));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        for_1_for_acc_6_psp_1_sva_1 <= STD_LOGIC_VECTOR'( "00000");
      ELSIF ( or_tmp_30 = '0' ) THEN
        for_1_for_acc_6_psp_1_sva_1 <= for_1_for_acc_6_psp_1_sva;
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        reconstruction_error_for_l_sva_3 <= STD_LOGIC_VECTOR'( "00000000000000000000000000000000");
      ELSIF ( ((fsm_output(5)) OR (fsm_output(9))) = '1' ) THEN
        reconstruction_error_for_l_sva_3 <= MUX_v_32_2_2((STD_LOGIC_VECTOR'( "000000000000000000000000")
            & reconstruction_error_for_l_acc_psp), z_out_8, fsm_output(9));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        for_1_for_acc_7_psp_1_sva_1 <= STD_LOGIC_VECTOR'( "000000");
      ELSIF ( or_tmp_30 = '0' ) THEN
        for_1_for_acc_7_psp_1_sva_1 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(for_1_for_j_8_0_sva(8
            DOWNTO 3)) + UNSIGNED'( "000001"), 6));
      END IF;
    END IF;
  END PROCESS;
  PROCESS (clk)
  BEGIN
    IF clk'EVENT AND ( clk = '1' ) THEN
      IF (rst = '1') THEN
        reconstruction_error_for_for_c_sva_8_0_2 <= STD_LOGIC_VECTOR'( "000000000");
      ELSIF ( (fsm_output(8)) = '0' ) THEN
        reconstruction_error_for_for_c_sva_8_0_2 <= MUX_v_9_2_2(reconstruction_error_for_for_c_acc_psp,
            (z_out_8(8 DOWNTO 0)), fsm_output(7));
      END IF;
    END IF;
  END PROCESS;
  not_39_nl <= NOT or_18_cse;
  reconstruction_error_rec_error_mux1h_4_nl <= MUX1HOT_v_32_3_2(reconstruction_error_rec_error_lpi_6,
      z_out_6, reconstruction_error_rec_error_sva, STD_LOGIC_VECTOR'( (fsm_output(6))
      & (fsm_output(8)) & (fsm_output(9))));
  not_34_nl <= NOT (fsm_output(5));
  or_49_nl <= TO_STDLOGIC(fsm_output(7 DOWNTO 6)/=STD_LOGIC_VECTOR'("00"));
  reconstruction_error_rec_error_mux1h_5_nl <= MUX1HOT_v_32_3_2(reconstruction_error_rec_error_lpi_6,
      z_out_6, reconstruction_error_rec_error_sva, STD_LOGIC_VECTOR'( or_49_nl &
      (fsm_output(8)) & (fsm_output(9))));
  not_nl <= NOT (fsm_output(5));
  reconstruction_error_for_for_c_mux_nl <= MUX_v_23_2_2((z_out_8(31 DOWNTO 9)), reconstruction_error_for_for_c_sva_31_9_2,
      fsm_output(8));
  not_38_nl <= NOT (fsm_output(6));
  reconstruction_error_for_for_nor_2_nl <= NOT((fsm_output(7)) OR (fsm_output(1))
      OR (fsm_output(10)));
  reconstruction_error_for_for_reconstruction_error_for_for_and_2_nl <= MUX_v_18_2_2(STD_LOGIC_VECTOR'("000000000000000000"),
      (image_error_rsci_data_out_d(31 DOWNTO 14)), reconstruction_error_for_for_nor_2_nl);
  reconstruction_error_for_for_mux_3_nl <= MUX_v_5_2_2((reconstruction_error_for_for_c_sva_31_9_2(4
      DOWNTO 0)), (image_error_rsci_data_out_d(13 DOWNTO 9)), fsm_output(8));
  reconstruction_error_for_for_nor_3_nl <= NOT((fsm_output(1)) OR (fsm_output(10)));
  reconstruction_error_for_for_reconstruction_error_for_for_and_3_nl <= MUX_v_5_2_2(STD_LOGIC_VECTOR'("00000"),
      reconstruction_error_for_for_mux_3_nl, reconstruction_error_for_for_nor_3_nl);
  reconstruction_error_for_for_mux1h_2_nl <= MUX1HOT_v_9_4_2(reconstruction_error_for_for_c_sva_8_0_2,
      for_for_j_8_0_sva_3, (image_error_rsci_data_out_d(8 DOWNTO 0)), for_1_for_j_8_0_sva,
      STD_LOGIC_VECTOR'( (fsm_output(7)) & (fsm_output(1)) & (fsm_output(8)) & (fsm_output(10))));
  reconstruction_error_for_for_or_2_nl <= (fsm_output(7)) OR (fsm_output(1));
  reconstruction_error_for_for_mux1h_3_nl <= MUX1HOT_v_32_3_2(STD_LOGIC_VECTOR'(
      "00000000000000000000000000011011"), image_error_rsci_data_out_d, STD_LOGIC_VECTOR'(
      "00000000000000000000000000011001"), STD_LOGIC_VECTOR'( reconstruction_error_for_for_or_2_nl
      & (fsm_output(8)) & (fsm_output(10))));
  z_out <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'( UNSIGNED(reconstruction_error_for_for_reconstruction_error_for_for_and_2_nl
      & reconstruction_error_for_for_reconstruction_error_for_for_and_3_nl & reconstruction_error_for_for_mux1h_2_nl)
      * UNSIGNED(reconstruction_error_for_for_mux1h_3_nl)), 32));
  for_for_else_mul_2_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED'( UNSIGNED(for_for_j_8_0_sva_3)
      * UNSIGNED'( "11001")), 13));
  for_for_else_mux_2_nl <= MUX_v_13_2_2(STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(for_for_else_mul_2_nl),
      13)), (z_out(12 DOWNTO 0)), fsm_output(10));
  for_for_else_mux_3_nl <= MUX_v_5_2_2((for_i_7_0_sva_3(7 DOWNTO 3)), (for_1_i_7_0_sva_4(7
      DOWNTO 3)), fsm_output(10));
  z_out_1 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(for_for_else_mux_2_nl) + CONV_UNSIGNED(UNSIGNED(for_for_else_mux_3_nl),
      13), 13));
  for_for_mux1h_2_nl <= MUX1HOT_v_8_3_2(STD_LOGIC_VECTOR'( "10110001"), STD_LOGIC_VECTOR'(
      "10110101"), STD_LOGIC_VECTOR'( "01111111"), STD_LOGIC_VECTOR'( (fsm_output(1))
      & (fsm_output(10)) & (fsm_output(7))));
  or_60_nl <= (fsm_output(1)) OR (fsm_output(10));
  mux_2_nl <= MUX_v_7_2_2(((NOT for_1_for_acc_7_psp_1_sva_1) & (NOT (for_1_for_j_8_0_sva(2)))),
      (z_out_5(8 DOWNTO 2)), or_60_nl);
  z_out_2 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(for_for_mux1h_2_nl) + CONV_UNSIGNED(UNSIGNED(mux_2_nl),
      8), 8));
  for_mux_3_nl <= MUX_v_8_2_2(for_i_7_0_sva_3, for_1_i_7_0_sva_4, fsm_output(12));
  z_out_3 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(for_mux_3_nl) + UNSIGNED'( "00000001"),
      8));
  for_for_aelse_mux_4_nl <= MUX_v_6_2_2((for_for_j_8_0_sva_3(8 DOWNTO 3)), (reconstruction_error_for_l_acc_psp(7
      DOWNTO 2)), fsm_output(5));
  z_out_4 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(for_for_aelse_mux_4_nl),
      7) + UNSIGNED'( "1111111"), 7));
  for_for_mux_2_nl <= MUX_v_9_2_2(for_for_j_8_0_sva_3, for_1_for_j_8_0_sva, fsm_output(10));
  z_out_5 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(for_for_mux_2_nl) + UNSIGNED'(
      "000000001"), 9));
  reconstruction_error_for_for_mux_4_nl <= MUX_v_32_2_2(reconstruction_error_rec_error_lpi_6,
      image_floue_rsci_data_out_d, fsm_output(2));
  reconstruction_error_for_for_mux_5_nl <= MUX_v_32_2_2(z_out, (NOT image_net_rsci_data_out_d),
      fsm_output(2));
  acc_5_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(reconstruction_error_for_for_mux_4_nl
      & (NOT (fsm_output(8)))) + UNSIGNED(reconstruction_error_for_for_mux_5_nl &
      '1'), 33));
  z_out_6 <= readslice(STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(acc_5_nl), 33)), 1,
      32);
  reconstruction_error_for_reconstruction_error_for_mux_1_nl <= MUX_v_32_2_2(z_out_8,
      reconstruction_error_rec_error_sva, fsm_output(10));
  reconstruction_error_for_reconstruction_error_for_or_1_nl <= (z_out_2(6)) OR TO_STDLOGIC(fsm_output(10
      DOWNTO 9)/=STD_LOGIC_VECTOR'("00"));
  reconstruction_error_for_acc_8_nl <= STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED((NOT for_1_for_acc_6_psp_1_sva_1)
      & (NOT (for_1_i_7_0_sva_4(2)))) + SIGNED'( "111111"), 6));
  reconstruction_error_for_mux_4_nl <= MUX_v_6_2_2(STD_LOGIC_VECTOR(CONV_SIGNED(SIGNED(reconstruction_error_for_acc_8_nl),
      6)), (z_out_2(5 DOWNTO 0)), fsm_output(7));
  reconstruction_error_for_not_13_nl <= NOT (fsm_output(10));
  reconstruction_error_for_reconstruction_error_for_and_1_nl <= MUX_v_6_2_2(STD_LOGIC_VECTOR'("000000"),
      reconstruction_error_for_mux_4_nl, reconstruction_error_for_not_13_nl);
  reconstruction_error_for_mux1h_2_nl <= MUX1HOT_v_2_3_2((NOT (for_1_i_7_0_sva_4(1
      DOWNTO 0))), (NOT (for_1_for_j_8_0_sva(1 DOWNTO 0))), STD_LOGIC_VECTOR'( "01"),
      STD_LOGIC_VECTOR'( (fsm_output(9)) & (fsm_output(7)) & (fsm_output(10))));
  reconstruction_error_for_acc_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(SIGNED(reconstruction_error_for_reconstruction_error_for_mux_1_nl),
      33) + CONV_UNSIGNED(CONV_SIGNED(SIGNED('1' & reconstruction_error_for_reconstruction_error_for_or_1_nl
      & reconstruction_error_for_reconstruction_error_for_and_1_nl & reconstruction_error_for_mux1h_2_nl),
      10), 33), 33));
  z_out_7_32 <= readindex(STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(reconstruction_error_for_acc_nl),
      33)), 32);
  reconstruction_error_for_mux_5_nl <= MUX_v_32_2_2(reconstruction_error_for_l_sva_3,
      (reconstruction_error_for_for_c_sva_31_9_2 & reconstruction_error_for_for_c_sva_8_0_2),
      fsm_output(7));
  z_out_8 <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(reconstruction_error_for_mux_5_nl)
      + UNSIGNED'( "00000000000000000000000000000001"), 32));
  for_acc_nl <= STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(STD_LOGIC_VECTOR'( "1001")
      & (fsm_output(12)) & '1') + CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(z_out_3(7
      DOWNTO 3)), 5), 6), 6));
  z_out_9_5 <= readindex(STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(for_acc_nl), 6)),
      5);
END v2;

-- ------------------------------------------------------------------
--  Design Unit:    main
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.funcs.ALL;
USE mgc_hls.mgc_ioport_comps_v11.ALL;


ENTITY main IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    image_net_rsc_addr : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
    image_net_rsc_re : OUT STD_LOGIC;
    image_net_rsc_data_out : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    image_net_rsc_triosy_lz : OUT STD_LOGIC;
    image_floue_rsc_addr : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
    image_floue_rsc_re : OUT STD_LOGIC;
    image_floue_rsc_data_out : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    image_floue_rsc_triosy_lz : OUT STD_LOGIC;
    image_error_rsc_data_in : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    image_error_rsc_addr : OUT STD_LOGIC_VECTOR (16 DOWNTO 0);
    image_error_rsc_re : OUT STD_LOGIC;
    image_error_rsc_we : OUT STD_LOGIC;
    image_error_rsc_data_out : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
    image_error_rsc_triosy_lz : OUT STD_LOGIC;
    depth_rsc_data_in : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    depth_rsc_addr : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
    depth_rsc_we : OUT STD_LOGIC;
    depth_rsc_triosy_lz : OUT STD_LOGIC;
    return_rsc_z : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
    return_rsc_triosy_lz : OUT STD_LOGIC
  );
END main;

ARCHITECTURE v2 OF main IS
  -- Default Constants
  SIGNAL PWR : STD_LOGIC;
  SIGNAL GND : STD_LOGIC;

  -- Interconnect Declarations
  SIGNAL image_net_rsci_addr_d : STD_LOGIC_VECTOR (15 DOWNTO 0);
  SIGNAL image_net_rsci_data_out_d : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL image_floue_rsci_addr_d : STD_LOGIC_VECTOR (15 DOWNTO 0);
  SIGNAL image_floue_rsci_data_out_d : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL image_error_rsci_data_in_d : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL image_error_rsci_addr_d : STD_LOGIC_VECTOR (16 DOWNTO 0);
  SIGNAL image_error_rsci_re_d : STD_LOGIC;
  SIGNAL image_error_rsci_we_d : STD_LOGIC;
  SIGNAL image_error_rsci_data_out_d : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL depth_rsci_data_in_d : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL depth_rsci_addr_d : STD_LOGIC_VECTOR (15 DOWNTO 0);
  SIGNAL depth_rsci_we_d : STD_LOGIC;
  SIGNAL image_net_rsci_re_d_iff : STD_LOGIC;

  COMPONENT ram_Xilinx_KINTEX_7_3_RAMSB_singleport_rport_3_60000_32_16_0_1_0_0_0_1_1_1_0_60000_32_1_gen
    PORT(
      data_out : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
      re : OUT STD_LOGIC;
      addr : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
      addr_d : IN STD_LOGIC_VECTOR (15 DOWNTO 0);
      re_d : IN STD_LOGIC;
      data_out_d : OUT STD_LOGIC_VECTOR (31 DOWNTO 0)
    );
  END COMPONENT;
  SIGNAL image_net_rsci_data_out : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL image_net_rsci_addr : STD_LOGIC_VECTOR (15 DOWNTO 0);
  SIGNAL image_net_rsci_addr_d_1 : STD_LOGIC_VECTOR (15 DOWNTO 0);
  SIGNAL image_net_rsci_data_out_d_1 : STD_LOGIC_VECTOR (31 DOWNTO 0);

  COMPONENT ram_Xilinx_KINTEX_7_3_RAMSB_singleport_rport_4_60000_32_16_0_1_0_0_0_1_1_1_0_60000_32_1_gen
    PORT(
      data_out : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
      re : OUT STD_LOGIC;
      addr : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
      addr_d : IN STD_LOGIC_VECTOR (15 DOWNTO 0);
      re_d : IN STD_LOGIC;
      data_out_d : OUT STD_LOGIC_VECTOR (31 DOWNTO 0)
    );
  END COMPONENT;
  SIGNAL image_floue_rsci_data_out : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL image_floue_rsci_addr : STD_LOGIC_VECTOR (15 DOWNTO 0);
  SIGNAL image_floue_rsci_addr_d_1 : STD_LOGIC_VECTOR (15 DOWNTO 0);
  SIGNAL image_floue_rsci_data_out_d_1 : STD_LOGIC_VECTOR (31 DOWNTO 0);

  COMPONENT ram_Xilinx_KINTEX_7_3_RAMSB_singleport_rwport_5_68256_32_17_0_1_0_0_0_1_1_1_0_68256_32_1_gen
    PORT(
      data_out : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
      we : OUT STD_LOGIC;
      re : OUT STD_LOGIC;
      addr : OUT STD_LOGIC_VECTOR (16 DOWNTO 0);
      data_in : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
      data_in_d : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
      addr_d : IN STD_LOGIC_VECTOR (16 DOWNTO 0);
      re_d : IN STD_LOGIC;
      we_d : IN STD_LOGIC;
      data_out_d : OUT STD_LOGIC_VECTOR (31 DOWNTO 0)
    );
  END COMPONENT;
  SIGNAL image_error_rsci_data_out : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL image_error_rsci_addr : STD_LOGIC_VECTOR (16 DOWNTO 0);
  SIGNAL image_error_rsci_data_in : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL image_error_rsci_data_in_d_1 : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL image_error_rsci_addr_d_1 : STD_LOGIC_VECTOR (16 DOWNTO 0);
  SIGNAL image_error_rsci_data_out_d_1 : STD_LOGIC_VECTOR (31 DOWNTO 0);

  COMPONENT ram_Xilinx_KINTEX_7_3_RAMSB_singleport_wport_6_60000_32_16_0_1_0_0_0_1_1_1_0_60000_32_1_gen
    PORT(
      we : OUT STD_LOGIC;
      addr : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
      data_in : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
      data_in_d : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
      addr_d : IN STD_LOGIC_VECTOR (15 DOWNTO 0);
      we_d : IN STD_LOGIC
    );
  END COMPONENT;
  SIGNAL depth_rsci_addr : STD_LOGIC_VECTOR (15 DOWNTO 0);
  SIGNAL depth_rsci_data_in : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL depth_rsci_data_in_d_1 : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL depth_rsci_addr_d_1 : STD_LOGIC_VECTOR (15 DOWNTO 0);

  COMPONENT main_core
    PORT(
      clk : IN STD_LOGIC;
      rst : IN STD_LOGIC;
      image_net_rsc_triosy_lz : OUT STD_LOGIC;
      image_floue_rsc_triosy_lz : OUT STD_LOGIC;
      image_error_rsc_triosy_lz : OUT STD_LOGIC;
      depth_rsc_triosy_lz : OUT STD_LOGIC;
      return_rsc_z : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
      return_rsc_triosy_lz : OUT STD_LOGIC;
      image_net_rsci_addr_d : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
      image_net_rsci_data_out_d : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
      image_floue_rsci_addr_d : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
      image_floue_rsci_data_out_d : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
      image_error_rsci_data_in_d : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
      image_error_rsci_addr_d : OUT STD_LOGIC_VECTOR (16 DOWNTO 0);
      image_error_rsci_re_d : OUT STD_LOGIC;
      image_error_rsci_we_d : OUT STD_LOGIC;
      image_error_rsci_data_out_d : IN STD_LOGIC_VECTOR (31 DOWNTO 0);
      depth_rsci_data_in_d : OUT STD_LOGIC_VECTOR (31 DOWNTO 0);
      depth_rsci_addr_d : OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
      depth_rsci_we_d : OUT STD_LOGIC;
      image_net_rsci_re_d_pff : OUT STD_LOGIC
    );
  END COMPONENT;
  SIGNAL main_core_inst_return_rsc_z : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL main_core_inst_image_net_rsci_addr_d : STD_LOGIC_VECTOR (15 DOWNTO 0);
  SIGNAL main_core_inst_image_net_rsci_data_out_d : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL main_core_inst_image_floue_rsci_addr_d : STD_LOGIC_VECTOR (15 DOWNTO 0);
  SIGNAL main_core_inst_image_floue_rsci_data_out_d : STD_LOGIC_VECTOR (31 DOWNTO
      0);
  SIGNAL main_core_inst_image_error_rsci_data_in_d : STD_LOGIC_VECTOR (31 DOWNTO
      0);
  SIGNAL main_core_inst_image_error_rsci_addr_d : STD_LOGIC_VECTOR (16 DOWNTO 0);
  SIGNAL main_core_inst_image_error_rsci_data_out_d : STD_LOGIC_VECTOR (31 DOWNTO
      0);
  SIGNAL main_core_inst_depth_rsci_data_in_d : STD_LOGIC_VECTOR (31 DOWNTO 0);
  SIGNAL main_core_inst_depth_rsci_addr_d : STD_LOGIC_VECTOR (15 DOWNTO 0);

BEGIN
  -- Default Constant Signal Assignments
  PWR <= '1';
  GND <= '0';

  image_net_rsci : ram_Xilinx_KINTEX_7_3_RAMSB_singleport_rport_3_60000_32_16_0_1_0_0_0_1_1_1_0_60000_32_1_gen
    PORT MAP(
      data_out => image_net_rsci_data_out,
      re => image_net_rsc_re,
      addr => image_net_rsci_addr,
      addr_d => image_net_rsci_addr_d_1,
      re_d => image_net_rsci_re_d_iff,
      data_out_d => image_net_rsci_data_out_d_1
    );
  image_net_rsci_data_out <= image_net_rsc_data_out;
  image_net_rsc_addr <= image_net_rsci_addr;
  image_net_rsci_addr_d_1 <= image_net_rsci_addr_d;
  image_net_rsci_data_out_d <= image_net_rsci_data_out_d_1;

  image_floue_rsci : ram_Xilinx_KINTEX_7_3_RAMSB_singleport_rport_4_60000_32_16_0_1_0_0_0_1_1_1_0_60000_32_1_gen
    PORT MAP(
      data_out => image_floue_rsci_data_out,
      re => image_floue_rsc_re,
      addr => image_floue_rsci_addr,
      addr_d => image_floue_rsci_addr_d_1,
      re_d => image_net_rsci_re_d_iff,
      data_out_d => image_floue_rsci_data_out_d_1
    );
  image_floue_rsci_data_out <= image_floue_rsc_data_out;
  image_floue_rsc_addr <= image_floue_rsci_addr;
  image_floue_rsci_addr_d_1 <= image_floue_rsci_addr_d;
  image_floue_rsci_data_out_d <= image_floue_rsci_data_out_d_1;

  image_error_rsci : ram_Xilinx_KINTEX_7_3_RAMSB_singleport_rwport_5_68256_32_17_0_1_0_0_0_1_1_1_0_68256_32_1_gen
    PORT MAP(
      data_out => image_error_rsci_data_out,
      we => image_error_rsc_we,
      re => image_error_rsc_re,
      addr => image_error_rsci_addr,
      data_in => image_error_rsci_data_in,
      data_in_d => image_error_rsci_data_in_d_1,
      addr_d => image_error_rsci_addr_d_1,
      re_d => image_error_rsci_re_d,
      we_d => image_error_rsci_we_d,
      data_out_d => image_error_rsci_data_out_d_1
    );
  image_error_rsci_data_out <= image_error_rsc_data_out;
  image_error_rsc_addr <= image_error_rsci_addr;
  image_error_rsc_data_in <= image_error_rsci_data_in;
  image_error_rsci_data_in_d_1 <= image_error_rsci_data_in_d;
  image_error_rsci_addr_d_1 <= image_error_rsci_addr_d;
  image_error_rsci_data_out_d <= image_error_rsci_data_out_d_1;

  depth_rsci : ram_Xilinx_KINTEX_7_3_RAMSB_singleport_wport_6_60000_32_16_0_1_0_0_0_1_1_1_0_60000_32_1_gen
    PORT MAP(
      we => depth_rsc_we,
      addr => depth_rsci_addr,
      data_in => depth_rsci_data_in,
      data_in_d => depth_rsci_data_in_d_1,
      addr_d => depth_rsci_addr_d_1,
      we_d => depth_rsci_we_d
    );
  depth_rsc_addr <= depth_rsci_addr;
  depth_rsc_data_in <= depth_rsci_data_in;
  depth_rsci_data_in_d_1 <= depth_rsci_data_in_d;
  depth_rsci_addr_d_1 <= depth_rsci_addr_d;

  main_core_inst : main_core
    PORT MAP(
      clk => clk,
      rst => rst,
      image_net_rsc_triosy_lz => image_net_rsc_triosy_lz,
      image_floue_rsc_triosy_lz => image_floue_rsc_triosy_lz,
      image_error_rsc_triosy_lz => image_error_rsc_triosy_lz,
      depth_rsc_triosy_lz => depth_rsc_triosy_lz,
      return_rsc_z => main_core_inst_return_rsc_z,
      return_rsc_triosy_lz => return_rsc_triosy_lz,
      image_net_rsci_addr_d => main_core_inst_image_net_rsci_addr_d,
      image_net_rsci_data_out_d => main_core_inst_image_net_rsci_data_out_d,
      image_floue_rsci_addr_d => main_core_inst_image_floue_rsci_addr_d,
      image_floue_rsci_data_out_d => main_core_inst_image_floue_rsci_data_out_d,
      image_error_rsci_data_in_d => main_core_inst_image_error_rsci_data_in_d,
      image_error_rsci_addr_d => main_core_inst_image_error_rsci_addr_d,
      image_error_rsci_re_d => image_error_rsci_re_d,
      image_error_rsci_we_d => image_error_rsci_we_d,
      image_error_rsci_data_out_d => main_core_inst_image_error_rsci_data_out_d,
      depth_rsci_data_in_d => main_core_inst_depth_rsci_data_in_d,
      depth_rsci_addr_d => main_core_inst_depth_rsci_addr_d,
      depth_rsci_we_d => depth_rsci_we_d,
      image_net_rsci_re_d_pff => image_net_rsci_re_d_iff
    );
  return_rsc_z <= main_core_inst_return_rsc_z;
  image_net_rsci_addr_d <= main_core_inst_image_net_rsci_addr_d;
  main_core_inst_image_net_rsci_data_out_d <= image_net_rsci_data_out_d;
  image_floue_rsci_addr_d <= main_core_inst_image_floue_rsci_addr_d;
  main_core_inst_image_floue_rsci_data_out_d <= image_floue_rsci_data_out_d;
  image_error_rsci_data_in_d <= main_core_inst_image_error_rsci_data_in_d;
  image_error_rsci_addr_d <= main_core_inst_image_error_rsci_addr_d;
  main_core_inst_image_error_rsci_data_out_d <= image_error_rsci_data_out_d;
  depth_rsci_data_in_d <= main_core_inst_depth_rsci_data_in_d;
  depth_rsci_addr_d <= main_core_inst_depth_rsci_addr_d;

END v2;



