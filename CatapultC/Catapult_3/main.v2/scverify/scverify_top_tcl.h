// ----------------------------------------------------------------------------
// SystemC Header for Top
//
//    HLS version: 10.0a/269363 Production Release
//       HLS date: Wed Nov  9 17:38:00 PST 2016
//  Flow Packages: HDL_Tcl 8.0a, SCVerify 8.0a
//
//   Generated by: xph3sle509@ocaepc57
// Generated date: Tue Jan 16 14:33:17 CET 2018
//
// ----------------------------------------------------------------------------
// 
// -------------------------------------
// scverify_top
// top module instantiating reference design,
// DUT and comparator
// -------------------------------------
// 
#ifndef INCLUDED_SCVERIFY_TOP_H
#define INCLUDED_SCVERIFY_TOP_H

#ifndef TO_QUOTED_STRING
#define TO_QUOTED_STRING(x) TO_QUOTED_STRING1(x)
#define TO_QUOTED_STRING1(x) #x
#endif
#ifndef TOP_HDL_ENTITY
#define TOP_HDL_ENTITY main
#endif

// Hold time for the SCVerify testbench to account for the gate delay after downstream synthesis in pico second(s)
// Hold time value is obtained from 'top_gate_constraints.cpp', which is generated at the end of RTL synthesis
#ifdef CCS_DUT_GATE
extern double __scv_hold_time;
extern double __scv_hold_time_RSCID_1;
extern double __scv_hold_time_RSCID_2;
extern double __scv_hold_time_RSCID_3;
extern double __scv_hold_time_RSCID_4;
extern double __scv_hold_time_RSCID_5;
extern double __scv_hold_time_RSCID_6;
extern double __scv_hold_time_RSCID_7;
#else
double __scv_hold_time = 0.0; // default for non-gate simulation is zero
double __scv_hold_time_RSCID_1 = 0.0;
double __scv_hold_time_RSCID_2 = 0.0;
double __scv_hold_time_RSCID_3 = 0.0;
double __scv_hold_time_RSCID_4 = 0.0;
double __scv_hold_time_RSCID_5 = 0.0;
double __scv_hold_time_RSCID_6 = 0.0;
double __scv_hold_time_RSCID_7 = 0.0;
#endif


#include "mc_testbench.h"
#include <mc_reset.h>
#include <mc_transactors.h>
#include <mc_scverify.h>
#include <fstream>
#include <string>
#include "ram_fpga_singleport_RF_trans_rsc.h"
#include "mgc_ioport_trans_rsc_v1.h"
#include <mc_monitor.h>
#include "mc_dut_wrapper.h"
#include "ccs_probes.cpp"


class scverify_top : public sc_module
{
public:
   // Interface Ports
   
   // Data objects
   sc_event deadlock_event;
   sc_signal< sc_logic >                      deadlocked;
   sc_event reset_deactivation_event;
   sc_signal< sc_logic >                      rst;
   sc_signal< sc_logic >                      rst_n;
   bool var_trdone;
   sc_clock clk;
   sc_signal< sc_logic >                      TLS_rst;
   sc_signal< sc_logic >                      in_sync;
   sc_signal< sc_logic >                      out_sync;
   sc_signal< sc_logic >                      inout_sync;
   sc_signal< unsigned >                      wait_for_init;
   sc_signal< sc_logic >                      TLS_design_is_idle;
   sc_signal< bool >                          TLS_design_is_idle_reg;
   sc_signal< sc_logic >                      TLS_enable_stalls;
   sc_signal< unsigned short >                TLS_stall_coverage;
   sc_signal< sc_logic >                      catapult_start;
   sc_signal< sc_logic >                      catapult_done;
   sc_signal< sc_logic >                      catapult_ready;
   ccs_probe_monitor* ccs_probe_monitor_INST;
   sc_signal< sc_lv<32> >                     TLS_image_net_rsc_data_out;
   ccs_sc_logic_to_sc_lv1_adapter CCS_ADAPTOR_image_net_rsc_re;
   sc_signal< sc_logic >                      TLS_image_net_rsc_re;
   sc_signal< sc_lv<1> >                      CCS_ADAPTOR_VECTOR_image_net_rsc_re;
   sc_signal< sc_lv<16> >                     TLS_image_net_rsc_addr;
   sc_signal< sc_lv<32> >                     TLS_image_net_rsc_data_in;
   sc_signal< sc_lv<1> >                      TLS_image_net_rsc_we;
   sc_signal< sc_logic >                      EN_image_net_rsc_INST_en;
   sc_signal< sc_lv<32> >                     TLS_image_floue_rsc_data_out;
   ccs_sc_logic_to_sc_lv1_adapter CCS_ADAPTOR_image_floue_rsc_re;
   sc_signal< sc_logic >                      TLS_image_floue_rsc_re;
   sc_signal< sc_lv<1> >                      CCS_ADAPTOR_VECTOR_image_floue_rsc_re;
   sc_signal< sc_lv<16> >                     TLS_image_floue_rsc_addr;
   sc_signal< sc_lv<32> >                     TLS_image_floue_rsc_data_in;
   sc_signal< sc_lv<1> >                      TLS_image_floue_rsc_we;
   sc_signal< sc_logic >                      EN_image_floue_rsc_INST_en;
   sc_signal< sc_lv<32> >                     TLS_image_error_rsc_data_out;
   ccs_sc_logic_to_sc_lv1_adapter CCS_ADAPTOR_image_error_rsc_we;
   sc_signal< sc_logic >                      TLS_image_error_rsc_we;
   sc_signal< sc_lv<1> >                      CCS_ADAPTOR_VECTOR_image_error_rsc_we;
   ccs_sc_logic_to_sc_lv1_adapter CCS_ADAPTOR_image_error_rsc_re;
   sc_signal< sc_logic >                      TLS_image_error_rsc_re;
   sc_signal< sc_lv<1> >                      CCS_ADAPTOR_VECTOR_image_error_rsc_re;
   sc_signal< sc_lv<17> >                     TLS_image_error_rsc_addr;
   sc_signal< sc_lv<32> >                     TLS_image_error_rsc_data_in;
   sc_signal< sc_logic >                      EN_image_error_rsc_INST_en;
   ccs_sc_logic_to_sc_lv1_adapter CCS_ADAPTOR_depth_rsc_we;
   sc_signal< sc_logic >                      TLS_depth_rsc_we;
   sc_signal< sc_lv<1> >                      CCS_ADAPTOR_VECTOR_depth_rsc_we;
   sc_signal< sc_lv<16> >                     TLS_depth_rsc_addr;
   sc_signal< sc_lv<32> >                     TLS_depth_rsc_data_in;
   sc_signal< sc_lv<1> >                      TLS_depth_rsc_re;
   sc_signal< sc_lv<32> >                     TLS_depth_rsc_data_out;
   sc_signal< sc_logic >                      EN_depth_rsc_INST_en;
   sc_signal< sc_lv<32> >                     TLS_return_rsc_z;
   tlm::tlm_fifo< mc_wait_ctrl > TLS_in_wait_ctrl_fifo_image_net;
   tlm::tlm_fifo< mgc_sysc_ver_array1D<int,60000> > TLS_fifo_in_image_net;
   sc_signal< sc_logic >                      TLS_image_net_rsc_triosy_lz;
   tlm::tlm_fifo< mc_wait_ctrl > TLS_in_wait_ctrl_fifo_image_floue;
   tlm::tlm_fifo< mgc_sysc_ver_array1D<int,60000> > TLS_fifo_in_image_floue;
   sc_signal< sc_logic >                      TLS_image_floue_rsc_triosy_lz;
   tlm::tlm_fifo< mc_wait_ctrl > TLS_out_wait_ctrl_fifo_image_error;
   tlm::tlm_fifo< mgc_sysc_ver_array1D<int,68256> > TLS_fifo_out_image_error;
   tlm::tlm_fifo< mc_wait_ctrl > TLS_in_wait_ctrl_fifo_image_error;
   tlm::tlm_fifo< mgc_sysc_ver_array1D<int,68256> > TLS_fifo_in_image_error;
   sc_signal< sc_logic >                      TLS_image_error_rsc_triosy_lz;
   tlm::tlm_fifo< mc_wait_ctrl > TLS_out_wait_ctrl_fifo_depth;
   tlm::tlm_fifo< mgc_sysc_ver_array1D<int,60000> > TLS_fifo_out_depth;
   sc_signal< sc_logic >                      TLS_depth_rsc_triosy_lz;
   tlm::tlm_fifo< mc_wait_ctrl > TLS_out_wait_ctrl_fifo_return;
   tlm::tlm_fifo< int > TLS_fifo_out_return;
   sc_signal< sc_logic >                      TLS_return_rsc_triosy_lz;
   tlm::tlm_fifo< mgc_sysc_ver_array1D<int,68256> > TLS_fifo_dummy_mask;
   tlm::tlm_fifo< mc_wait_ctrl > TLS_fifo_dummy_wait_ctrl_mask;
   tlm::tlm_fifo< mgc_sysc_ver_array1D<double,289> > TLS_fifo_dummy_filtre;
   tlm::tlm_fifo< mc_wait_ctrl > TLS_fifo_dummy_wait_ctrl_filtre;
   
   // Named Objects
   
   // Module instance pointers
   ccs_DUT_wrapper *main_INST;
   mc_programmable_reset *rst_driver;
   catapult_monitor *catapult_monitor_INST;
   ram_fpga_singleport_RF_trans_rsc< 3,60000,32,16,0,1,0,0,0,1,1,1,0 > *image_net_rsc_INST;
   ram_fpga_singleport_RF_trans_rsc< 4,60000,32,16,0,1,0,0,0,1,1,1,0 > *image_floue_rsc_INST;
   ram_fpga_singleport_RF_trans_rsc< 5,68256,32,17,0,1,0,0,0,1,1,1,0 > *image_error_rsc_INST;
   ram_fpga_singleport_RF_trans_rsc< 6,60000,32,16,0,1,0,0,0,1,1,1,0 > *depth_rsc_INST;
   mgc_out_stdreg_trans_rsc_v1< 1,32 > *return_rsc_INST;
   mc_input_transactor<mgc_sysc_ver_array1D<int,60000>,32,true> *image_net_transactor;
   mc_trios_input_monitor *trios_monitor_image_net_INST;
   mc_input_transactor<mgc_sysc_ver_array1D<int,60000>,32,true> *image_floue_transactor;
   mc_trios_input_monitor *trios_monitor_image_floue_INST;
   mc_inout_transactor<mgc_sysc_ver_array1D<int,68256>,32,true> *image_error_transactor;
   mc_trios_inout_monitor *trios_monitor_image_error_INST;
   mc_output_transactor<mgc_sysc_ver_array1D<int,60000>,32,true> *depth_transactor;
   mc_trios_output_monitor *trios_monitor_depth_INST;
   mc_output_transactor<int,32,true> *return_transactor;
   mc_trios_output_monitor *trios_monitor_return_INST;
   testbench *testbench_INST;
   
   // Declare processes (SC_METHOD and SC_THREAD)
   void deadlock_notify();
   void deadlock_watch();
   void generate_sync();
   void generate_reset();
   
   // Constructor
   SC_HAS_PROCESS(scverify_top);
   scverify_top(
      const sc_module_name& name
   )
      : deadlocked("deadlocked")
      , rst("rst")
      , rst_n("rst_n")
      , var_trdone(false)
      , CCS_CLK_CTOR(clk,"clk",50.000000,SC_NS,0.5,0.000000,SC_NS,false)
      , TLS_rst("TLS_rst")
      , in_sync("in_sync")
      , out_sync("out_sync")
      , inout_sync("inout_sync")
      , wait_for_init("wait_for_init")
      , TLS_design_is_idle("TLS_design_is_idle")
      , TLS_design_is_idle_reg("TLS_design_is_idle_reg")
      , TLS_enable_stalls("TLS_enable_stalls")
      , TLS_stall_coverage("TLS_stall_coverage")
      , catapult_start("catapult_start")
      , catapult_done("catapult_done")
      , catapult_ready("catapult_ready")
      , ccs_probe_monitor_INST(NULL)
      , TLS_image_net_rsc_data_out("TLS_image_net_rsc_data_out")
      , CCS_ADAPTOR_image_net_rsc_re("CCS_ADAPTOR_image_net_rsc_re")
      , TLS_image_net_rsc_re("TLS_image_net_rsc_re")
      , CCS_ADAPTOR_VECTOR_image_net_rsc_re("CCS_ADAPTOR_VECTOR_image_net_rsc_re")
      , TLS_image_net_rsc_addr("TLS_image_net_rsc_addr")
      , TLS_image_net_rsc_data_in("TLS_image_net_rsc_data_in")
      , TLS_image_net_rsc_we("TLS_image_net_rsc_we")
      , EN_image_net_rsc_INST_en("EN_image_net_rsc_INST_en")
      , TLS_image_floue_rsc_data_out("TLS_image_floue_rsc_data_out")
      , CCS_ADAPTOR_image_floue_rsc_re("CCS_ADAPTOR_image_floue_rsc_re")
      , TLS_image_floue_rsc_re("TLS_image_floue_rsc_re")
      , CCS_ADAPTOR_VECTOR_image_floue_rsc_re("CCS_ADAPTOR_VECTOR_image_floue_rsc_re")
      , TLS_image_floue_rsc_addr("TLS_image_floue_rsc_addr")
      , TLS_image_floue_rsc_data_in("TLS_image_floue_rsc_data_in")
      , TLS_image_floue_rsc_we("TLS_image_floue_rsc_we")
      , EN_image_floue_rsc_INST_en("EN_image_floue_rsc_INST_en")
      , TLS_image_error_rsc_data_out("TLS_image_error_rsc_data_out")
      , CCS_ADAPTOR_image_error_rsc_we("CCS_ADAPTOR_image_error_rsc_we")
      , TLS_image_error_rsc_we("TLS_image_error_rsc_we")
      , CCS_ADAPTOR_VECTOR_image_error_rsc_we("CCS_ADAPTOR_VECTOR_image_error_rsc_we")
      , CCS_ADAPTOR_image_error_rsc_re("CCS_ADAPTOR_image_error_rsc_re")
      , TLS_image_error_rsc_re("TLS_image_error_rsc_re")
      , CCS_ADAPTOR_VECTOR_image_error_rsc_re("CCS_ADAPTOR_VECTOR_image_error_rsc_re")
      , TLS_image_error_rsc_addr("TLS_image_error_rsc_addr")
      , TLS_image_error_rsc_data_in("TLS_image_error_rsc_data_in")
      , EN_image_error_rsc_INST_en("EN_image_error_rsc_INST_en")
      , CCS_ADAPTOR_depth_rsc_we("CCS_ADAPTOR_depth_rsc_we")
      , TLS_depth_rsc_we("TLS_depth_rsc_we")
      , CCS_ADAPTOR_VECTOR_depth_rsc_we("CCS_ADAPTOR_VECTOR_depth_rsc_we")
      , TLS_depth_rsc_addr("TLS_depth_rsc_addr")
      , TLS_depth_rsc_data_in("TLS_depth_rsc_data_in")
      , TLS_depth_rsc_re("TLS_depth_rsc_re")
      , TLS_depth_rsc_data_out("TLS_depth_rsc_data_out")
      , EN_depth_rsc_INST_en("EN_depth_rsc_INST_en")
      , TLS_return_rsc_z("TLS_return_rsc_z")
      , TLS_in_wait_ctrl_fifo_image_net("TLS_in_wait_ctrl_fifo_image_net",-1)
      , TLS_fifo_in_image_net("TLS_fifo_in_image_net",-1)
      , TLS_image_net_rsc_triosy_lz("TLS_image_net_rsc_triosy_lz")
      , TLS_in_wait_ctrl_fifo_image_floue("TLS_in_wait_ctrl_fifo_image_floue",-1)
      , TLS_fifo_in_image_floue("TLS_fifo_in_image_floue",-1)
      , TLS_image_floue_rsc_triosy_lz("TLS_image_floue_rsc_triosy_lz")
      , TLS_out_wait_ctrl_fifo_image_error("TLS_out_wait_ctrl_fifo_image_error",-1)
      , TLS_fifo_out_image_error("TLS_fifo_out_image_error",-1)
      , TLS_in_wait_ctrl_fifo_image_error("TLS_in_wait_ctrl_fifo_image_error",-1)
      , TLS_fifo_in_image_error("TLS_fifo_in_image_error",-1)
      , TLS_image_error_rsc_triosy_lz("TLS_image_error_rsc_triosy_lz")
      , TLS_out_wait_ctrl_fifo_depth("TLS_out_wait_ctrl_fifo_depth",-1)
      , TLS_fifo_out_depth("TLS_fifo_out_depth",-1)
      , TLS_depth_rsc_triosy_lz("TLS_depth_rsc_triosy_lz")
      , TLS_out_wait_ctrl_fifo_return("TLS_out_wait_ctrl_fifo_return",-1)
      , TLS_fifo_out_return("TLS_fifo_out_return",-1)
      , TLS_return_rsc_triosy_lz("TLS_return_rsc_triosy_lz")
      , TLS_fifo_dummy_mask("TLS_fifo_dummy_mask",1)
      , TLS_fifo_dummy_wait_ctrl_mask("TLS_fifo_dummy_wait_ctrl_mask",1)
      , TLS_fifo_dummy_filtre("TLS_fifo_dummy_filtre",1)
      , TLS_fifo_dummy_wait_ctrl_filtre("TLS_fifo_dummy_wait_ctrl_filtre",1)
   {
      // Instantiate other modules
      main_INST = new ccs_DUT_wrapper(
         "rtl",
         TO_QUOTED_STRING(TOP_HDL_ENTITY)
      );
      main_INST->image_net_rsc_data_out(TLS_image_net_rsc_data_out);
      main_INST->image_net_rsc_re(TLS_image_net_rsc_re);
      main_INST->image_net_rsc_addr(TLS_image_net_rsc_addr);
      main_INST->image_floue_rsc_data_out(TLS_image_floue_rsc_data_out);
      main_INST->image_floue_rsc_re(TLS_image_floue_rsc_re);
      main_INST->image_floue_rsc_addr(TLS_image_floue_rsc_addr);
      main_INST->image_error_rsc_data_out(TLS_image_error_rsc_data_out);
      main_INST->image_error_rsc_we(TLS_image_error_rsc_we);
      main_INST->image_error_rsc_re(TLS_image_error_rsc_re);
      main_INST->image_error_rsc_addr(TLS_image_error_rsc_addr);
      main_INST->image_error_rsc_data_in(TLS_image_error_rsc_data_in);
      main_INST->depth_rsc_we(TLS_depth_rsc_we);
      main_INST->depth_rsc_addr(TLS_depth_rsc_addr);
      main_INST->depth_rsc_data_in(TLS_depth_rsc_data_in);
      main_INST->return_rsc_z(TLS_return_rsc_z);
      main_INST->clk(clk);
      main_INST->rst(TLS_rst);
      main_INST->image_net_rsc_triosy_lz(TLS_image_net_rsc_triosy_lz);
      main_INST->image_floue_rsc_triosy_lz(TLS_image_floue_rsc_triosy_lz);
      main_INST->image_error_rsc_triosy_lz(TLS_image_error_rsc_triosy_lz);
      main_INST->depth_rsc_triosy_lz(TLS_depth_rsc_triosy_lz);
      main_INST->return_rsc_triosy_lz(TLS_return_rsc_triosy_lz);
      
      rst_driver = new mc_programmable_reset(
         "rst_driver",
         100.0,
         0
      );
      rst_driver->reset_out(TLS_rst);
      
      catapult_monitor_INST = new catapult_monitor(
         "Monitor",
         clk,
         true,
         625186LL,
         625186LL
      );
      catapult_monitor_INST->rst(rst);
      
      image_net_rsc_INST = new ram_fpga_singleport_RF_trans_rsc< 3,60000,32,16,0,1,0,0,0,1,1,1,0 > (
         "image_net_rsc",
         true
      );
      image_net_rsc_INST->data_out(TLS_image_net_rsc_data_out);
      image_net_rsc_INST->re(CCS_ADAPTOR_VECTOR_image_net_rsc_re);
      image_net_rsc_INST->addr(TLS_image_net_rsc_addr);
      image_net_rsc_INST->clk(clk);
      image_net_rsc_INST->a_rst(rst);
      image_net_rsc_INST->s_rst(TLS_rst);
      image_net_rsc_INST->en(EN_image_net_rsc_INST_en);
      image_net_rsc_INST->data_in(TLS_image_net_rsc_data_in);
      image_net_rsc_INST->we(TLS_image_net_rsc_we);
      image_net_rsc_INST->add_attribute(*(new sc_attribute<double>("CLK_SKEW_DELAY", __scv_hold_time_RSCID_3 )));
      
      image_floue_rsc_INST = new ram_fpga_singleport_RF_trans_rsc< 4,60000,32,16,0,1,0,0,0,1,1,1,0 > (
         "image_floue_rsc",
         true
      );
      image_floue_rsc_INST->data_out(TLS_image_floue_rsc_data_out);
      image_floue_rsc_INST->re(CCS_ADAPTOR_VECTOR_image_floue_rsc_re);
      image_floue_rsc_INST->addr(TLS_image_floue_rsc_addr);
      image_floue_rsc_INST->clk(clk);
      image_floue_rsc_INST->a_rst(rst);
      image_floue_rsc_INST->s_rst(TLS_rst);
      image_floue_rsc_INST->en(EN_image_floue_rsc_INST_en);
      image_floue_rsc_INST->data_in(TLS_image_floue_rsc_data_in);
      image_floue_rsc_INST->we(TLS_image_floue_rsc_we);
      image_floue_rsc_INST->add_attribute(*(new sc_attribute<double>("CLK_SKEW_DELAY", __scv_hold_time_RSCID_4 )));
      
      image_error_rsc_INST = new ram_fpga_singleport_RF_trans_rsc< 5,68256,32,17,0,1,0,0,0,1,1,1,0 > (
         "image_error_rsc",
         true
      );
      image_error_rsc_INST->data_out(TLS_image_error_rsc_data_out);
      image_error_rsc_INST->we(CCS_ADAPTOR_VECTOR_image_error_rsc_we);
      image_error_rsc_INST->re(CCS_ADAPTOR_VECTOR_image_error_rsc_re);
      image_error_rsc_INST->addr(TLS_image_error_rsc_addr);
      image_error_rsc_INST->data_in(TLS_image_error_rsc_data_in);
      image_error_rsc_INST->clk(clk);
      image_error_rsc_INST->a_rst(rst);
      image_error_rsc_INST->s_rst(TLS_rst);
      image_error_rsc_INST->en(EN_image_error_rsc_INST_en);
      image_error_rsc_INST->add_attribute(*(new sc_attribute<double>("CLK_SKEW_DELAY", __scv_hold_time_RSCID_5 )));
      
      depth_rsc_INST = new ram_fpga_singleport_RF_trans_rsc< 6,60000,32,16,0,1,0,0,0,1,1,1,0 > (
         "depth_rsc",
         true
      );
      depth_rsc_INST->we(CCS_ADAPTOR_VECTOR_depth_rsc_we);
      depth_rsc_INST->addr(TLS_depth_rsc_addr);
      depth_rsc_INST->data_in(TLS_depth_rsc_data_in);
      depth_rsc_INST->clk(clk);
      depth_rsc_INST->a_rst(rst);
      depth_rsc_INST->s_rst(TLS_rst);
      depth_rsc_INST->en(EN_depth_rsc_INST_en);
      depth_rsc_INST->re(TLS_depth_rsc_re);
      depth_rsc_INST->data_out(TLS_depth_rsc_data_out);
      depth_rsc_INST->add_attribute(*(new sc_attribute<double>("CLK_SKEW_DELAY", __scv_hold_time_RSCID_6 )));
      
      return_rsc_INST = new mgc_out_stdreg_trans_rsc_v1< 1,32 > (
         "return_rsc",
         true
      );
      return_rsc_INST->z(TLS_return_rsc_z);
      return_rsc_INST->clk(clk);
      return_rsc_INST->add_attribute(*(new sc_attribute<double>("CLK_SKEW_DELAY", __scv_hold_time_RSCID_7 )));
      
      image_net_transactor = new mc_input_transactor<mgc_sysc_ver_array1D<int,60000>,32,true> (
         "transactor_image_net",
         0,
         32,
         0,
         false
      );
      image_net_transactor->in_wait_ctrl_fifo(TLS_in_wait_ctrl_fifo_image_net);
      image_net_transactor->in_fifo(TLS_fifo_in_image_net);
      image_net_transactor->add_attribute(*(new sc_attribute<int>("MC_TRANSACTOR_EVENT", MC_TRANSACTOR_UNDERFLOW | MC_TRANSACTOR_WAIT )));
      image_net_transactor->bind_clk(clk,true);
      image_net_transactor->register_block(image_net_rsc_INST,image_net_rsc_INST->basename(),TLS_image_net_rsc_triosy_lz,0,59999,1);
      
      trios_monitor_image_net_INST = new mc_trios_input_monitor(
         "image_net_trios_mon"
      );
      trios_monitor_image_net_INST->trios(TLS_image_net_rsc_triosy_lz);
      trios_monitor_image_net_INST->register_mon(catapult_monitor_INST);
      
      image_floue_transactor = new mc_input_transactor<mgc_sysc_ver_array1D<int,60000>,32,true> (
         "transactor_image_floue",
         0,
         32,
         0,
         false
      );
      image_floue_transactor->in_wait_ctrl_fifo(TLS_in_wait_ctrl_fifo_image_floue);
      image_floue_transactor->in_fifo(TLS_fifo_in_image_floue);
      image_floue_transactor->add_attribute(*(new sc_attribute<int>("MC_TRANSACTOR_EVENT", MC_TRANSACTOR_UNDERFLOW | MC_TRANSACTOR_WAIT )));
      image_floue_transactor->bind_clk(clk,true);
      image_floue_transactor->register_block(image_floue_rsc_INST,image_floue_rsc_INST->basename(),TLS_image_floue_rsc_triosy_lz,0,59999,1);
      
      trios_monitor_image_floue_INST = new mc_trios_input_monitor(
         "image_floue_trios_mon"
      );
      trios_monitor_image_floue_INST->trios(TLS_image_floue_rsc_triosy_lz);
      trios_monitor_image_floue_INST->register_mon(catapult_monitor_INST);
      
      image_error_transactor = new mc_inout_transactor<mgc_sysc_ver_array1D<int,68256>,32,true> (
         "transactor_image_error",
         0,
         32,
         0
      );
      image_error_transactor->in_wait_ctrl_fifo(TLS_in_wait_ctrl_fifo_image_error);
      image_error_transactor->in_fifo(TLS_fifo_in_image_error);
      image_error_transactor->out_wait_ctrl_fifo(TLS_out_wait_ctrl_fifo_image_error);
      image_error_transactor->out_fifo(TLS_fifo_out_image_error);
      image_error_transactor->add_attribute(*(new sc_attribute<int>("MC_TRANSACTOR_EVENT", MC_TRANSACTOR_UNDERFLOW | MC_TRANSACTOR_WAIT )));
      image_error_transactor->bind_clk(clk,true);
      image_error_transactor->register_block(image_error_rsc_INST,image_error_rsc_INST->basename(),TLS_image_error_rsc_triosy_lz,0,68255,1);
      
      trios_monitor_image_error_INST = new mc_trios_inout_monitor(
         "image_error_trios_mon"
      );
      trios_monitor_image_error_INST->trios(TLS_image_error_rsc_triosy_lz);
      trios_monitor_image_error_INST->register_mon(catapult_monitor_INST);
      
      depth_transactor = new mc_output_transactor<mgc_sysc_ver_array1D<int,60000>,32,true> (
         "transactor_depth",
         0,
         32,
         0
      );
      depth_transactor->out_wait_ctrl_fifo(TLS_out_wait_ctrl_fifo_depth);
      depth_transactor->out_fifo(TLS_fifo_out_depth);
      depth_transactor->add_attribute(*(new sc_attribute<int>("MC_TRANSACTOR_EVENT", MC_TRANSACTOR_UNDERFLOW | MC_TRANSACTOR_WAIT )));
      depth_transactor->bind_clk(clk,true);
      depth_transactor->register_block(depth_rsc_INST,depth_rsc_INST->basename(),TLS_depth_rsc_triosy_lz,0,59999,1);
      
      trios_monitor_depth_INST = new mc_trios_output_monitor(
         "depth_trios_mon"
      );
      trios_monitor_depth_INST->trios(TLS_depth_rsc_triosy_lz);
      trios_monitor_depth_INST->register_mon(catapult_monitor_INST);
      
      return_transactor = new mc_output_transactor<int,32,true> (
         "transactor_return",
         0,
         32,
         0
      );
      return_transactor->out_wait_ctrl_fifo(TLS_out_wait_ctrl_fifo_return);
      return_transactor->out_fifo(TLS_fifo_out_return);
      return_transactor->add_attribute(*(new sc_attribute<int>("MC_TRANSACTOR_EVENT", MC_TRANSACTOR_UNDERFLOW | MC_TRANSACTOR_WAIT )));
      return_transactor->bind_clk(clk,true);
      return_transactor->register_block(return_rsc_INST,return_rsc_INST->basename(),TLS_return_rsc_triosy_lz,0,0,1);
      
      trios_monitor_return_INST = new mc_trios_output_monitor(
         "return_trios_mon"
      );
      trios_monitor_return_INST->trios(TLS_return_rsc_triosy_lz);
      trios_monitor_return_INST->register_mon(catapult_monitor_INST);
      
      testbench_INST = new testbench(
         "user_tb"
      );
      testbench_INST->clk(clk);
      testbench_INST->ccs_mask(TLS_fifo_dummy_mask);
      testbench_INST->ccs_wait_ctrl_mask(TLS_fifo_dummy_wait_ctrl_mask);
      testbench_INST->ccs_filtre(TLS_fifo_dummy_filtre);
      testbench_INST->ccs_wait_ctrl_filtre(TLS_fifo_dummy_wait_ctrl_filtre);
      testbench_INST->ccs_image_net(TLS_fifo_in_image_net);
      testbench_INST->ccs_wait_ctrl_image_net(TLS_in_wait_ctrl_fifo_image_net);
      testbench_INST->ccs_image_floue(TLS_fifo_in_image_floue);
      testbench_INST->ccs_wait_ctrl_image_floue(TLS_in_wait_ctrl_fifo_image_floue);
      testbench_INST->ccs_image_error_IN(TLS_fifo_in_image_error);
      testbench_INST->ccs_wait_ctrl_image_error_IN(TLS_in_wait_ctrl_fifo_image_error);
      testbench_INST->ccs_image_error(TLS_fifo_out_image_error);
      testbench_INST->ccs_wait_ctrl_image_error(TLS_out_wait_ctrl_fifo_image_error);
      testbench_INST->ccs_depth(TLS_fifo_out_depth);
      testbench_INST->ccs_wait_ctrl_depth(TLS_out_wait_ctrl_fifo_depth);
      testbench_INST->ccs_return(TLS_fifo_out_return);
      testbench_INST->ccs_wait_ctrl_return(TLS_out_wait_ctrl_fifo_return);
      testbench_INST->design_is_idle(TLS_design_is_idle_reg);
      testbench_INST->enable_stalls(TLS_enable_stalls);
      testbench_INST->stall_coverage(TLS_stall_coverage);
      
      
      // Register processes
      SC_METHOD(deadlock_notify);
      sensitive << deadlock_event;
      dont_initialize();
      SC_METHOD(deadlock_watch);
      sensitive  << clk;
      dont_initialize();
      SC_METHOD(generate_sync);
      sensitive << clk << rst;
      dont_initialize();
      SC_METHOD(generate_reset);
      sensitive << reset_deactivation_event;
      // Other constructor statements
      testbench::register_end_of_testbench_obj(catapult_monitor_INST);
      #if defined(CCS_SCVERIFY) && defined(CCS_DUT_RTL) && !defined(CCS_DUT_SYSC) && !defined(CCS_SYSC) && !defined(CCS_DUT_POWER)
      ccs_probe_monitor_INST = new ccs_probe_monitor("ccs_probe_monitor");
      ccs_probe_monitor_INST->clk(clk);
      ccs_probe_monitor_INST->rst(rst);
      #endif
      // set seed for random number generator used by wait_ctrl
      mt19937_init_genrand(19650218UL);
      install_observe_foreign_signals();
      CCS_ADAPTOR_image_net_rsc_re.inSCALAR(TLS_image_net_rsc_re);
      CCS_ADAPTOR_image_net_rsc_re.outVECTOR(CCS_ADAPTOR_VECTOR_image_net_rsc_re);
      EN_image_net_rsc_INST_en = (0 != 0) ? sc_dt::SC_LOGIC_1 : sc_dt::SC_LOGIC_0;
      CCS_ADAPTOR_image_floue_rsc_re.inSCALAR(TLS_image_floue_rsc_re);
      CCS_ADAPTOR_image_floue_rsc_re.outVECTOR(CCS_ADAPTOR_VECTOR_image_floue_rsc_re);
      EN_image_floue_rsc_INST_en = (0 != 0) ? sc_dt::SC_LOGIC_1 : sc_dt::SC_LOGIC_0;
      CCS_ADAPTOR_image_error_rsc_we.inSCALAR(TLS_image_error_rsc_we);
      CCS_ADAPTOR_image_error_rsc_we.outVECTOR(CCS_ADAPTOR_VECTOR_image_error_rsc_we);
      CCS_ADAPTOR_image_error_rsc_re.inSCALAR(TLS_image_error_rsc_re);
      CCS_ADAPTOR_image_error_rsc_re.outVECTOR(CCS_ADAPTOR_VECTOR_image_error_rsc_re);
      EN_image_error_rsc_INST_en = (0 != 0) ? sc_dt::SC_LOGIC_1 : sc_dt::SC_LOGIC_0;
      CCS_ADAPTOR_depth_rsc_we.inSCALAR(TLS_depth_rsc_we);
      CCS_ADAPTOR_depth_rsc_we.outVECTOR(CCS_ADAPTOR_VECTOR_depth_rsc_we);
      EN_depth_rsc_INST_en = (0 != 0) ? sc_dt::SC_LOGIC_1 : sc_dt::SC_LOGIC_0;
      testbench_INST->_capture_mask = false;
      testbench_INST->_capture_filtre = false;
   }
   
   ~scverify_top()
   {
      delete main_INST;
      main_INST = 0;
      delete rst_driver;
      rst_driver = 0;
      delete catapult_monitor_INST;
      catapult_monitor_INST = 0;
      delete image_net_rsc_INST;
      image_net_rsc_INST = 0;
      delete image_floue_rsc_INST;
      image_floue_rsc_INST = 0;
      delete image_error_rsc_INST;
      image_error_rsc_INST = 0;
      delete depth_rsc_INST;
      depth_rsc_INST = 0;
      delete return_rsc_INST;
      return_rsc_INST = 0;
      delete image_net_transactor;
      image_net_transactor = 0;
      delete trios_monitor_image_net_INST;
      trios_monitor_image_net_INST = 0;
      delete image_floue_transactor;
      image_floue_transactor = 0;
      delete trios_monitor_image_floue_INST;
      trios_monitor_image_floue_INST = 0;
      delete image_error_transactor;
      image_error_transactor = 0;
      delete trios_monitor_image_error_INST;
      trios_monitor_image_error_INST = 0;
      delete depth_transactor;
      depth_transactor = 0;
      delete trios_monitor_depth_INST;
      trios_monitor_depth_INST = 0;
      delete return_transactor;
      return_transactor = 0;
      delete trios_monitor_return_INST;
      trios_monitor_return_INST = 0;
      delete testbench_INST;
      testbench_INST = 0;
   }
   
   // C++ class functions
   public:
      void setup_debug() ;
   public:
      void install_observe_foreign_signals() ;
   public:
      void debug(const char *varname, int flags, int count) ;
};
#endif
