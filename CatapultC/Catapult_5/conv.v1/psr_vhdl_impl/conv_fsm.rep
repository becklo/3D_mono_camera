//Precision RTL Synthesis  64-bit 2016.1.1.28 (Production Release) Thu Sep  8 06:54:57 PDT 2016
//
//Copyright (c) Mentor Graphics Corporation, 1996-2016, All Rights Reserved.
//           Portions copyright 1991-2008 Compuware Corporation
//                     UNPUBLISHED, LICENSED SOFTWARE.
//          CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
//        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS
//
//Running on Linux xph3sle509@ocaepc57 #1 SMP Debian 3.16.43-2+deb8u5 (2017-09-19) 3.16.0-4-amd64 x86_64
//

                                =======================                         
                                Precision 64-bit 2016.1.1.28                         
                                =======================                         



                                FSM EXTRACTION ANALYSIS                         
                                =======================                         


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Module : work.conv_core_core_fsm(v1)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Number of FSMs Extracted : 1

1.
--------------------------------------------------
Number of States                : 11
Primary State Variable          : state_var[10:0]
Other State Variable(s)         : 1) state_var_NS[10:0]
Async set/reset state(s)        : (none)
Re-encoding Scheme              : ONEHOT 
FSM: Info, state encoding table:
FSM:	Index	                         State Name	                            Literal	                      Encoding
FSM:	    0	                            for_C_0	                        00000000010	                   00000000001
FSM:	    1	                    for_for_for_C_0	                        00000000100	                   00000000010
FSM:	    2	                for_for_for_for_C_0	                        00000001000	                   00000000100
FSM:	    3	                for_for_for_for_C_1	                        00000010000	                   00000001000
FSM:	    4	                for_for_for_for_C_2	                        00000100000	                   00000010000
FSM:	    5	                for_for_for_for_C_3	                        00001000000	                   00000100000
FSM:	    6	                    for_for_for_C_1	                        00010000000	                   00001000000
FSM:	    7	                        for_for_C_0	                        00100000000	                   00010000000
FSM:	    8	                            for_C_1	                        01000000000	                   00100000000
FSM:	    9	                           main_C_1	                        10000000000	                   01000000000
FSM:	   10	                           main_C_0	                        00000000001	                   10000000000



